addLayer("a", { // Achievements layer
    name: "achievements", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üèÜ" : "A"},
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: "0",
        playerName: "Player",
        fps: 0,
    }},
    color: "#FFFF00",
    resource: "Useless Paperclips", // Name of prestige currency
    tooltip: "Achievements",
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    row: "side", // Row the layer is in on the tree (0 is the first row)
    layerShown(){return true},
    milestonePopups: false,
    update(diff) {
        if(!player.a.playerName) player.a.playerName = "Player"
        player.a.fps = ((1/(diff+0.001))+player.a.fps*4)/5
    },
    tabFormat: {
        "Achievements": {
            content: [
                ["achievements", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]],
                "blank",
                ["achievements", [14]],
                "blank",
                ],
        },
        "Savebank": {
            content: [
                ["clickables", [2, 3, 4, 5, 6]],
                "blank",
                ["clickables", [7]],
            ],
        },
        "Time Control": {
            content: [
                ["clickables", [1]],
                "blank",
            ],
        },
    },
    clickables: {
        11: {
            display: "Set devSpeed to <br><font size = +1>0.01%</font>",
            onClick() {player.devSpeed = new Decimal(0.0001)},
            canClick: true,
        },
        12: {
            display: "Set devSpeed to <br><font size = +1>10%</font>",
            onClick() {player.devSpeed = new Decimal(0.1)},
            canClick: true,
        },
        13: {
            display: "Set devSpeed to <br><font size = +1>100%</font>",
            onClick() {player.devSpeed = new Decimal(1)},
            canClick: true,
        },
        14: {
            display: "Set devSpeed to <br><font size = +1>1000%</font>",
            onClick() {if(confirm("The game isn't balanced at this speed! This is mainly recommended for recovering saves.")) player.devSpeed = new Decimal(10)},
            canClick: true,
        },

        21: {
            title: "Plants",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTM4MzEwMzk5NCwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiIzIiwidGltZVBsYXllZCI6NTQ2LjQ5ODk5OTk5OTk5MzgsImtlZXBHb2luZyI6ZmFsc2UsImhhc05hTiI6dHJ1ZSwicG9pbnRzIjoiMjE0NTI4MzUuNzY5NjAxODc0Iiwic3VidGFicyI6eyJjaGFuZ2Vsb2ctdGFiIjp7fX0sImxhc3RTYWZlVGFiIjoicCIsImluZm9ib3hlcyI6e30sImluZm8tdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6NTQ2LjQ5ODk5OTk5OTk5MzgsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwib3B0aW9ucy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo1NDYuNDk4OTk5OTk5OTkzOCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJjaGFuZ2Vsb2ctdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6NTQ2LjQ5ODk5OTk5OTk5MzgsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiYSI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiPyIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo1NDYuNDk4OTk5OTk5OTkzOCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6WyIxMSIsIjEyIiwiMTMiLCIxNCIsIjIxIl0sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJwIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI1MCIsImJlc3QiOiI1MCIsInRvdGFsIjoiMjMzIiwicmVzZXRUaW1lIjoyLjQ5OTk5OTk5OTk5OTk5ODcsImZvcmNlVG9vbHRpcCI6dHJ1ZSwiYnV5YWJsZXMiOnsiMTEiOiIwIiwiMTIiOiIwIiwiMTMiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxMSwxMiwxMywxNCwyMSwyMiwyMywyNF0sIm1pbGVzdG9uZXMiOlsiMCJdLCJsYXN0TWlsZXN0b25lIjoiMCIsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOmZhbHNlLCJwb2ludHMiOiIwIiwiYmVzdCI6IjAiLCJ0b3RhbCI6IjAiLCJyZXNldFRpbWUiOjU0Ni40OTg5OTk5OTk5OTM4LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwieiI6eyJ1bmxvY2tlZCI6ZmFsc2UsInBvaW50cyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsInJlc2V0VGltZSI6NTQ2LjQ5ODk5OTk5OTk5MzgsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7IjExIjowLCIxMiI6MCwiMjEiOjAsIjIyIjowfSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidyI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMCIsImxhcmdlIjoiMCIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo1NDYuNDk4OTk5OTk5OTkzOCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwiYmxhbmsiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo1NDYuNDk4OTk5OTk5OTkzOCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ0cmVlLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjU0Ni40OTg5OTk5OTk5OTM4LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImRldlNwZWVkIjoxfQ==")
            },
            style() {return{
                'background-color': tmp.p.color,
            }},
        },
        22: {
            title: "Gardens",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTcxNDk3NTQwOCwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiI1IiwidGltZVBsYXllZCI6MjE0Ni4wOTE2Mzg4ODcxMDc0LCJrZWVwR29pbmciOmZhbHNlLCJoYXNOYU4iOnRydWUsInBvaW50cyI6IjExOTYzNC4xMjcwMDAwMDAwMSIsInN1YnRhYnMiOnsiY2hhbmdlbG9nLXRhYiI6e30sInAiOnsibWFpblRhYnMiOiJQbGFudHMifX0sImxhc3RTYWZlVGFiIjoieiIsImluZm9ib3hlcyI6e30sImluZm8tdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MjE0Ni4wOTE2Mzg4ODcxMDc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sIm9wdGlvbnMtdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MjE0Ni4wOTE2Mzg4ODcxMDc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImNoYW5nZWxvZy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMTQ2LjA5MTYzODg4NzEwNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiYmxhbmsiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMTQ2LjA5MTYzODg4NzEwNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidHJlZS10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMTQ2LjA5MTYzODg4NzEwNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiYSI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiPyIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMTQ2LjA5MTYzODg4NzEwNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiMjUiXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInAiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjI3IiwiYmVzdCI6IjI3IiwidG90YWwiOiIyNyIsInJlc2V0VGltZSI6OS43MjI5OTk5OTk5OTk5OTUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMCIsIjEyIjoiMCIsIjEzIjoiMCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjE4IiwiYmVzdCI6IjE4IiwidG90YWwiOiI1OCIsInJlc2V0VGltZSI6MjE0Ni4wOTE2Mzg4ODcxMDc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAiLCIyMSI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0XSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOiIwIiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInoiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjEiLCJiZXN0IjoiMSIsInRvdGFsIjoiMSIsInJlc2V0VGltZSI6MjE0Ni4wOTE2Mzg4ODcxMDc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiXSwibGFzdE1pbGVzdG9uZSI6IjAiLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7IjExIjowLCIxMiI6MCwiMjEiOjAsIjIyIjowfSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidyI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMCIsImxhcmdlIjoiMCIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo5LjcyMjk5OTk5OTk5OTk5NSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwiciI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMCIsInJlc2VhcmNoZXJzIjoiMCIsImJlc3QiOiIwIiwidG90YWwiOiIwIiwicmVzZXRUaW1lIjowLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAiLCIyMSI6IjAiLCIyMiI6IjAiLCIyMyI6IjAiLCIzMSI6IjAiLCIzMiI6IjAiLCIzMyI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidCI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMCIsImJlc3QiOiIwIiwidG90YWwiOiIwIiwibGVhdmVzIjoiMCIsInJlc2V0VGltZSI6MjE0MS4yMDA2Mzg4ODcxMDczLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9fQ==")
            },
            style() {return{
                'background-color': tmp.g.color,
            }},
        },
        23: {
            title: "Zones",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTg5MTQ0NzQxNCwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiI1IiwidGltZVBsYXllZCI6MjQxMjUuMDI1NjM4ODg1MjU0LCJrZWVwR29pbmciOmZhbHNlLCJoYXNOYU4iOnRydWUsInBvaW50cyI6IjMuMjA3MzE2MTA1MDkzNTE3ZTY4Iiwic3VidGFicyI6eyJjaGFuZ2Vsb2ctdGFiIjp7fSwicCI6eyJtYWluVGFicyI6IlBsYW50cyJ9fSwibGFzdFNhZmVUYWIiOiJwIiwiaW5mb2JveGVzIjp7fSwiaW5mby10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyNDEyNS4wMjU2Mzg4ODUyNTQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwib3B0aW9ucy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyNDEyNS4wMjU2Mzg4ODUyNTQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiY2hhbmdlbG9nLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjI0MTI1LjAyNTYzODg4NTI1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJhIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI/IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjI0MTI1LjAyNTYzODg4NTI1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6WyIxMSIsIjEyIiwiMTMiLCIxNCIsIjE1IiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSIsIjMxIiwiMzIiLCIzMyIsIjM0Il0sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJwIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIyNTUiLCJiZXN0IjoiMjU1IiwidG90YWwiOiIyNTUiLCJyZXNldFRpbWUiOjQuMjQ3LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOlsiMCJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJnIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIzMzQiLCJiZXN0IjoiMzM0IiwidG90YWwiOiIxMTExIiwicmVzZXRUaW1lIjo0NzkuMjkyMDAwMDAwMDAxNSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIzNCIsIjEyIjoiMzQiLCIxMyI6IjE0IiwiMjEiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxMSwxMiwxMywxNCwyMSwyMiwyMywyNCwzMSwzMiwzMywzNCw0MSw0Miw0Myw0NF0sIm1pbGVzdG9uZXMiOlsiMCIsIjEiXSwibGFzdE1pbGVzdG9uZSI6IjEiLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwieiI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiNCIsImJlc3QiOiIzIiwidG90YWwiOiIyIiwicmVzZXRUaW1lIjo0LjI0NywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIl0sImxhc3RNaWxlc3RvbmUiOiIzIiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6eyIxMSI6MywiMTIiOjMsIjIxIjozLCIyMiI6M30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwidyI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiNTQuMDM4MDMwMDU5MTk0MDgiLCJsYXJnZSI6IjAiLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6NC4yNDcsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sInIiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjAiLCJyZXNlYXJjaGVycyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsInJlc2V0VGltZSI6MCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIwIiwiMTIiOiIwIiwiMTMiOiIwIiwiMjEiOiIwIiwiMjIiOiIwIiwiMjMiOiIwIiwiMzEiOiIwIiwiMzIiOiIwIiwiMzMiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInQiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsImxlYXZlcyI6IjAiLCJyZXNldFRpbWUiOjQuMjQ3LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjAiLCIxMiI6IjAiLCIxMyI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJibGFuayI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjI0MTI1LjAyNTYzODg4NTI1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ0cmVlLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjI0MTI1LjAyNTYzODg4NTI1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJkZXZTcGVlZCI6IjEifQ==")
            },
            style() {return{
                'background-color': tmp.z.color,
            }},
        },
        31: {
            title: "Wildlife",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTIxMDYzNjU4Miwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiIzIiwidGltZVBsYXllZCI6MTgxNDkuMjQ3OTk5OTUyNTEzLCJrZWVwR29pbmciOmZhbHNlLCJoYXNOYU4iOnRydWUsInBvaW50cyI6IjIuNjUwOTc1MzY1OTE3MzUyN2U5NjYiLCJzdWJ0YWJzIjp7ImNoYW5nZWxvZy10YWIiOnt9fSwibGFzdFNhZmVUYWIiOiJnIiwiaW5mb2JveGVzIjp7fSwiaW5mby10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxODE0OS4yNDc5OTk5NTI1MTMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwib3B0aW9ucy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxODE0OS4yNDc5OTk5NTI1MTMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiY2hhbmdlbG9nLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4MTQ5LjI0Nzk5OTk1MjUxMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJibGFuayI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4MTQ5LjI0Nzk5OTk1MjUxMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ0cmVlLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4MTQ5LjI0Nzk5OTk1MjUxMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJhIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI/IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4MTQ5LjI0Nzk5OTk1MjUxMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6WyIxMSIsIjEyIiwiMTMiLCIxNCIsIjE1IiwiMjEiLCIyMiIsIjI0IiwiMjMiLCIyNSIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCI0MSIsIjQyIiwiNDMiLCI0NCIsIjQ1Il0sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJwIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIyMjI5OSIsImJlc3QiOiIyMjI5OSIsInRvdGFsIjoiMjIyOTkiLCJyZXNldFRpbWUiOjE5OS40OTIwMDAwMDAwMDIxOCwiZm9yY2VUb29sdGlwIjp0cnVlLCJidXlhYmxlcyI6eyIxMSI6IjE2OCIsIjEyIjoiNDI2IiwiMTMiOiIxMDAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzEyLDExLDIxLDIyLDIzLDI0LDEzLDE0LDUyLDUxLDQxLDMxLDMzLDQyLDMyLDQzLDQ0LDM0LDU0LDUzLDYxLDYyLDYzLDY0LDcyLDcxLDczLDc0XSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjQ5NiIsImJlc3QiOiI0OTYiLCJ0b3RhbCI6IjEyNzMiLCJyZXNldFRpbWUiOjE5OS40OTIwMDAwMDAwMDIxOCwiZm9yY2VUb29sdGlwIjp0cnVlLCJidXlhYmxlcyI6eyIxMSI6IjgwIiwiMTIiOiI4MCIsIjEzIjoiMjcifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0LDMxLDMyLDMzLDM0LDQxLDQyLDQzLDQ0XSwibWlsZXN0b25lcyI6WyIwIiwiMSJdLCJsYXN0TWlsZXN0b25lIjoiMSIsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ6Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI0IiwiYmVzdCI6IjQiLCJ0b3RhbCI6IjQiLCJyZXNldFRpbWUiOjMxNTMuMzQzMDAwMDAwNDUyLCJmb3JjZVRvb2x0aXAiOnRydWUsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyJdLCJsYXN0TWlsZXN0b25lIjoiMyIsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnsiMTEiOjMsIjEyIjozLCIyMSI6MywiMjIiOjN9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sInciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjIuMjA1NDUyNTA3MzI0ODk3NGUyMCIsImxhcmdlIjoiMjE2Mi4yOTAxNjg3Nzk1MiIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxOTkuNDkyMDAwMDAwMDAyMTgsImZvcmNlVG9vbHRpcCI6dHJ1ZSwiYnV5YWJsZXMiOnsiMTEiOiIyOSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMjEsMzEsMzIsMjIsNDEsMTMsNDIsMzMsNDMsMjMsNTEsNTIsNTMsMTQsMzQsNDQsNTQsMjQsNjEsNjIsNjMsNjRdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfX0=")
            },
            style() {return{
                'background-color': tmp.w.color,
            }},
        },
        32: {
            title: "Research",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTM3ODcwNDA4NSwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiIzIiwidGltZVBsYXllZCI6MTg3MzEuNDA0OTk5OTg4ODM0LCJrZWVwR29pbmciOmZhbHNlLCJoYXNOYU4iOnRydWUsInBvaW50cyI6IjMuMjM3MTg5MTc1MTU5MDg0NGUyNzMxIiwic3VidGFicyI6eyJjaGFuZ2Vsb2ctdGFiIjp7fX0sImxhc3RTYWZlVGFiIjoidyIsImluZm9ib3hlcyI6e30sImluZm8tdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MTg3MzEuNDA0OTk5OTg4ODM0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sIm9wdGlvbnMtdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MTg3MzEuNDA0OTk5OTg4ODM0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImNoYW5nZWxvZy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxODczMS40MDQ5OTk5ODg4MzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiYSI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiPyIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxODczMS40MDQ5OTk5ODg4MzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjIxIiwiMjIiLCIzNSIsIjI0IiwiMjMiLCIyNSIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiNDEiLCI0MiIsIjQ0IiwiNDMiLCI0NSJdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwicCI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiNjMxODAiLCJiZXN0IjoiNjMxODAiLCJ0b3RhbCI6IjEwODA3MyIsInJlc2V0VGltZSI6MTY0MC40NzUwMDAwMDAwMDYsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiNTQ3IiwiMTIiOiIxMzcwIiwiMTMiOiIxMDAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0LDMxLDMzLDMyLDM0LDQxLDQyLDQzLDQ0LDUxLDUyLDUzLDU0LDYxLDYyLDYzLDY0LDcxLDcyLDczLDc0XSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6Ijg1OCIsImJlc3QiOiI4NTgiLCJ0b3RhbCI6IjE2MzUiLCJyZXNldFRpbWUiOjE2NjYuNTU2MDAwMDAwMDA2OSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIxNTIiLCIxMiI6IjE1MiIsIjEzIjoiNTEiLCIyMSI6IjYifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0LDMxLDMyLDMzLDM0LDQxLDQyLDQzLDQ0XSwibWlsZXN0b25lcyI6WyIwIiwiMSJdLCJsYXN0TWlsZXN0b25lIjoiMSIsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ6Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI1IiwiYmVzdCI6IjUiLCJ0b3RhbCI6IjUiLCJyZXNldFRpbWUiOjE2NDAuNDc1MDAwMDAwMDA2LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIiwiMiIsIjMiLCI0Il0sImxhc3RNaWxlc3RvbmUiOiI0IiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6eyIxMSI6MywiMTIiOjMsIjIxIjozLCIyMiI6M30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwidyI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMi4wODY1ODkwMjU4NzcxMDZlMTM0IiwibGFyZ2UiOiI1NDQ1ODkyNzMzNDk5NjQuNSIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoxNjQwLjQ3NTAwMDAwMDAwNiwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiI0NSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMjEsMzEsMzIsMjIsNDEsNDIsMTMsMzMsNDMsMjMsNTEsNTIsNTMsMjQsNjEsNjIsNjMsMTQsMzQsNDQsNTQsNjQsNzEsNzIsNzMsNzQsODEsODIsODMsODRdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwiciI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMTIwIiwiYmVzdCI6IjEyMCIsInRvdGFsIjoiMzY2MDkiLCJyZXNldFRpbWUiOjcuNDk3MDAwMDAwMDAwMDAyNiwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiI1OSIsIjEyIjoiMzgiLCIxMyI6IjU4IiwiMjEiOiIyMyIsIjIyIjoiNDYiLCIyMyI6IjE4IiwiMzEiOiIxMCIsIjMyIjoiMjMiLCIzMyI6IjkiLCI0MSI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDE1LDIxLDIyLDIzLDI0LDI1XSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsInJlc2V0VGltZXMiOjAsInJlc2VhcmNoZXJzIjoiMi45Njg5Mzk5NjczMDk5NmUzMCJ9LCJibGFuayI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4NzMxLjQwNDk5OTk4ODgzNCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJ0cmVlLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE4NzMxLjQwNDk5OTk4ODgzNCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9fQ==")
            },
            style() {return{
                'background-color': tmp.r.color,
            }},
        },
        33: {
            title: "Trees",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NTcxMDY1MzEyMywibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiI0IiwidGltZVBsYXllZCI6MjIyMTIuOTI2OTk5OTYwNzMsImtlZXBHb2luZyI6dHJ1ZSwiaGFzTmFOIjp0cnVlLCJwb2ludHMiOiI0LjI3NDUzMjg0NjkyMDI1OWU2ODgwNCIsInN1YnRhYnMiOnsiY2hhbmdlbG9nLXRhYiI6e30sInAiOnsibWFpblRhYnMiOiJUcmVlcyJ9fSwibGFzdFNhZmVUYWIiOiJwIiwiaW5mb2JveGVzIjp7fSwiaW5mby10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMjIxMi45MjY5OTk5NjA3MywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJvcHRpb25zLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjIyMjEyLjkyNjk5OTk2MDczLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImNoYW5nZWxvZy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjoyMjIxMi45MjY5OTk5NjA3MywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJhIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI/IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjIyMjEyLjkyNjk5OTk2MDczLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIyMSIsIjIyIiwiMzUiLCIyNCIsIjIzIiwiMjUiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIjQxIiwiNDIiLCI0NCIsIjQzIiwiNDUiLCI1MSIsIjUyIiwiNTMiLCI1NCIsIjU1IiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI2NSJdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwicCI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMTU4MTIwMCIsImJlc3QiOiIxNTgxMjAwIiwidG90YWwiOiIxNjI2MDkzIiwicmVzZXRUaW1lIjozOTUuMDAxMDAwMDAwMDAxNDUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMTM1NjQiLCIxMiI6IjM0NjIyIiwiMTMiOiIxMDAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0LDMyLDMxLDMzLDM0LDQxLDQyLDQzLDQ0LDUxLDUyLDUzLDU0LDYxLDYyLDYzLDY0LDcxLDcyLDczLDc0XSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjIyOTgiLCJiZXN0IjoiMjI5OCIsInRvdGFsIjoiMzA3NSIsInJlc2V0VGltZSI6NTE0OC4wNzc5OTk5OTczNTY1LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjQ0MCIsIjEyIjoiNDQwIiwiMTMiOiIxNDciLCIyMSI6IjE1MCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMTMsMTQsMjEsMjIsMjMsMjQsMzEsMzIsMzMsMzQsNDEsNDIsNDMsNDRdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIl0sImxhc3RNaWxlc3RvbmUiOiIxIiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInoiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjYiLCJiZXN0IjoiNiIsInRvdGFsIjoiNiIsInJlc2V0VGltZSI6NTEyMS45OTY5OTk5OTczNjMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyIsIjQiLCI1Il0sImxhc3RNaWxlc3RvbmUiOiI1IiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6eyIxMSI6MywiMTIiOjMsIjIxIjozLCIyMiI6M30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwidyI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiNy4yODMyMDQ3MDQ2MzkzNzhlNjQ0IiwibGFyZ2UiOiI0Ljc1MjY0NjY1NzI2NDM3NWU2NSIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjozOTUuMDAxMDAwMDAwMDAxNDUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiNTAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDIxLDMxLDMyLDIyLDQxLDQyLDEzLDMzLDQzLDIzLDUxLDUyLDUzLDI0LDYxLDYyLDYzLDE0LDM0LDQ0LDU0LDY0LDcxLDcyLDczLDc0LDgxLDgyLDgzLDg0XSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sInIiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjQyOSIsImJlc3QiOiI0MjkiLCJ0b3RhbCI6IjU5MjY0IiwicmVzZXRUaW1lIjo5MDEuMzE3MDAwMDAwMDA1OCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIyMTQiLCIxMiI6IjE0MiIsIjEzIjoiMjEzIiwiMjEiOiI4NSIsIjIyIjoiMjA2IiwiMjMiOiI3MCIsIjMxIjoiNDEiLCIzMiI6IjEwMSIsIjMzIjoiNDMiLCI0MSI6IjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDE1LDIxLDIyLDIzLDI0LDI1LDMxLDMyLDMzXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsInJlc2V0VGltZXMiOjAsInJlc2VhcmNoZXJzIjoiMS4wMDc5OTM0OTY5MzA3ODdlMTcwIn0sInQiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjY3NTMiLCJiZXN0IjoiNjc1MyIsInRvdGFsIjoiMzA4MDIiLCJsZWF2ZXMiOiIxLjY2MjczMzUzNTQ2OTEyMTNlMTYiLCJyZXNldFRpbWUiOjM0ODEuNTIxOTk5OTk5MTMzLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjMwIiwiMTIiOiIzMCIsIjEzIjoiMTUifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDMxLDMyLDMzLDQxLDQyLDQzLDQ0LDUxLDYxLDcxLDgyLDgxLDczLDgzLDcyLDkxXSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCJdLCJsYXN0TWlsZXN0b25lIjoiNCIsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImJ1bGsiOmZhbHNlLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJibGFuayI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjIyMjEyLjkyNjk5OTk2MDczLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInRyZWUtdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MjIyMTIuOTI2OTk5OTYwNzMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifX0=")
            },
            style() {return{
                'background-color': tmp.t.color,
            }},
        },
        41: {
            title: "Ecosystems",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4Njc2MzQ5MDkyMCwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiI2IiwidGltZVBsYXllZCI6MzY1NTMuODEzOTk5OTEzMzY0LCJrZWVwR29pbmciOnRydWUsImhhc05hTiI6dHJ1ZSwicG9pbnRzIjoiMy41NjIxNzA1ODIxMDc5NDI0ZTExODUzMiIsInN1YnRhYnMiOnsiY2hhbmdlbG9nLXRhYiI6e30sInAiOnsibWFpblRhYnMiOiJQbGFudHMifSwiYSI6eyJtYWluVGFicyI6IkFjaGlldm1lbnRzIn0sImUiOnsibWFpblRhYnMiOiJFY29sb2d5In19LCJsYXN0U2FmZVRhYiI6ImUiLCJpbmZvYm94ZXMiOnsiYSI6eyJwbGFudEhlbHAiOmZhbHNlLCJnYXJkZW5IZWxwIjpmYWxzZSwiem9uZUhlbHAiOmZhbHNlLCJ3aWxkbGlmZUhlbHAiOmZhbHNlLCJyZXNlYXJjaEhlbHAiOmZhbHNlLCJ0cmVlSGVscCI6ZmFsc2V9fSwiaW5mby10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjozNjU1My44MTM5OTk5MTMzNjQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwib3B0aW9ucy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjozNjU1My44MTM5OTk5MTMzNjQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiY2hhbmdlbG9nLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjM2NTUzLjgxMzk5OTkxMzM2NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJhIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI/IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjM2NTUzLjgxMzk5OTkxMzM2NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOiIwIiwiYWNoaWV2ZW1lbnRzIjpbIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIyMSIsIjIyIiwiMzUiLCIyNCIsIjIzIiwiMjUiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIjQxIiwiNDIiLCI0NCIsIjQzIiwiNDUiLCI1MSIsIjUyIiwiNTMiLCI1NCIsIjU1IiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI2NSIsIjcxIiwiNzIiLCI3MyIsIjc0IiwiNzUiXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInAiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjM4MzgwNjYiLCJiZXN0IjoiMzgzODA2NiIsInRvdGFsIjoiNzQzMjU2OSIsInJlc2V0VGltZSI6MTYxLjUzMzAwMDAwMDAwMjM1LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjIzMjg0IiwiMTIiOiI1OTYwMyIsIjEzIjoiMTQwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIyMSIsIjIyIiwiMjMiLCIyNCIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiNDEiLCI0MiIsIjQzIiwiNDQiLCI1MSIsIjUyIiwiNTMiLCI1NCIsIjYxIiwiNjIiLCI2MyIsIjY0IiwiNzEiLCI3MiIsIjczIiwiNzQiLCI4MSIsIjgyIl0sIm1pbGVzdG9uZXMiOlsiMCJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJnIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIzMDA5IiwiYmVzdCI6IjMwMDkiLCJ0b3RhbCI6IjM3ODYiLCJyZXNldFRpbWUiOjE2NC43MzMwMDAwMDAwMDIzLCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjU4MiIsIjEyIjoiNTgyIiwiMTMiOiIxOTQiLCIyMSI6IjIyMSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMTMsMTQsMjEsMjIsMjMsMjQsMzEsMzIsMzMsMzQsNDEsNDIsNDMsNDRdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIl0sImxhc3RNaWxlc3RvbmUiOiIxIiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwieiI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMTIiLCJiZXN0IjoiMTIiLCJ0b3RhbCI6IjEyIiwicmVzZXRUaW1lIjoxNjQuNzMzMDAwMDAwMDAyMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5Il0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnsiMTEiOjMsIjEyIjozLCIyMSI6MywiMjIiOjN9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sInciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjQuMTczNzQ0NDc2MTk5OTU5ZTEwNTciLCJsYXJnZSI6IjIuNTQxMzk3NzI3ODgzMDY1N2UxMDYiLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6MTY0LjczMzAwMDAwMDAwMjMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiNTAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDIxLDIyLDMyLDMxLDQxLDQyLDEzLDMzLDIzLDQzLDUxLDUyLDUzLDI0LDYxLDYyLDYzLDE0LDM0LDQ0LDU0LDY0LDcxLDcyLDczLDc0LDgxLDgyLDgzLDg0XSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sInIiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjYwOSIsImJlc3QiOiI2MDkiLCJ0b3RhbCI6IjYwOSIsInJlc2V0VGltZSI6MTY0LjczMzAwMDAwMDAwMjMsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMzA0IiwiMTIiOiIyMDIiLCIxMyI6IjMwMyIsIjIxIjoiMTIxIiwiMjIiOiIyODUiLCIyMyI6IjEwMCIsIjMxIjoiNTkiLCIzMiI6IjE0NiIsIjMzIjoiNjMifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzE0LDExLDEyLDEzLDE1LDIxLDIyLDIzLDI0LDI1LDMxLDMyLDMzXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsInJlc2V0VGltZXMiOjAsInJlc2VhcmNoZXJzIjoiNC4yNTE5NzY1NDk2ODA1OThlMjYyIn0sInQiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjExNzM2IiwiYmVzdCI6IjExNzM2IiwidG90YWwiOiIxMTczNiIsImxlYXZlcyI6IjYuNTAwNjIyNzkyNTU1MDYxZTE3IiwicmVzZXRUaW1lIjoxNjQuNzMzMDAwMDAwMDAyMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIzMCIsIjEyIjoiMzAiLCIxMyI6IjE2In0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxMSwxMiwxMywxNCwyMSwzMSwzMiwzMyw0MSw0Miw0Myw0NCw1MSw2MSw3MSw4Miw4MSw3Myw4Myw3Miw5MV0sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyIsIjQiXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYnVsayI6ZmFsc2UsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImUiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjExIiwiZWNvbG9neSI6IjEyMzI3LjQwMzg1Mzk1MzYxIiwiYmVzdCI6IjExIiwidG90YWwiOiIxMSIsImNvb2xkb3duIjoiMS40MzMwMDAwMDAwMDAwMDE2IiwibGFzdEFiaWxpdHkiOjEyLCJhdXRvQWJpbGl0eSI6dHJ1ZSwicmVzZXRUaW1lIjoxNjQuNzMzMDAwMDAwMDAyMywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIzMSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7IjExIjp0cnVlLCIxMiI6dHJ1ZX0sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0XSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5Il0sImxhc3RNaWxlc3RvbmUiOiI5IiwiYWNoaWV2ZW1lbnRzIjpbIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsfSwiYmxhbmsiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjozNjU1My44MTM5OTk5MTMzNjQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidHJlZS10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjozNjU1My44MTM5OTk5MTMzNjQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifX0=")
            },
            style() {return{
                'background-color': tmp.e.color,
            }},
        },
        42: {
            title: "Fish",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InRyZWUtdGFiIiwidGltZSI6MTY4NjkzMzU2Mzc2NCwibm90aWZ5Ijp7fSwidmVyc2lvblR5cGUiOiJ0aGVub255bW91cy10aGVwbGFudHRyZWUxNzU4Njc0NSIsInZlcnNpb24iOiI3IiwidGltZVBsYXllZCI6NDEwNTMuMzY5OTk5OTQwNTQsImtlZXBHb2luZyI6dHJ1ZSwiaGFzTmFOIjp0cnVlLCJwb2ludHMiOiIyLjg1MTUwNTgyOTI0MzgzOGU1NTQ3NjY3Iiwic3VidGFicyI6eyJjaGFuZ2Vsb2ctdGFiIjp7fSwicCI6eyJtYWluVGFicyI6IlBsYW50cyJ9LCJhIjp7Im1haW5UYWJzIjoiQWNoaWV2ZW1lbnRzIn0sImUiOnsibWFpblRhYnMiOiJFY29sb2d5In0sInciOnsibWFpblRhYnMiOiJGaXNoIn19LCJsYXN0U2FmZVRhYiI6ImUiLCJpbmZvYm94ZXMiOnsiYSI6eyJwbGFudEhlbHAiOmZhbHNlLCJnYXJkZW5IZWxwIjpmYWxzZSwiem9uZUhlbHAiOmZhbHNlLCJ3aWxkbGlmZUhlbHAiOmZhbHNlLCJyZXNlYXJjaEhlbHAiOmZhbHNlLCJ0cmVlSGVscCI6ZmFsc2V9fSwiaW5mby10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo0MTA1My4zNjk5OTk5NDA1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJvcHRpb25zLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjQxMDUzLjM2OTk5OTk0MDU0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImNoYW5nZWxvZy10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo0MTA1My4zNjk5OTk5NDA1NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJhIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI/IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjQxMDUzLjM2OTk5OTk0MDU0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiXSwibGFzdE1pbGVzdG9uZSI6IjAiLCJhY2hpZXZlbWVudHMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjIxIiwiMjIiLCIzNSIsIjI0IiwiMjMiLCIyNSIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiNDEiLCI0MiIsIjQ0IiwiNDMiLCI0NSIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI2MSIsIjYyIiwiNjMiLCI2NCIsIjY1IiwiNzEiLCI3MiIsIjczIiwiNzQiLCI3NSIsIjgxIiwiODIiLCI4MyIsIjg0IiwiODUiXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInAiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjI2MjE5MTYxOSIsImJlc3QiOiIyNjIxOTE2MTkiLCJ0b3RhbCI6IjUyNjA5NjIxMC4wOTU3MzQ1IiwicmVzZXRUaW1lIjozMzAuMTg4MDAwMDAwMDAwNjcsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMTA4NjMyNCIsIjEyIjoiMjc3NjQ0NiIsIjEzIjoiMTYzIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIyMSIsIjIyIiwiMjMiLCIyNCIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiNDEiLCI0MiIsIjQzIiwiNDQiLCI1MSIsIjUyIiwiNTMiLCI1NCIsIjYxIiwiNjIiLCI2MyIsIjY0IiwiNzEiLCI3MiIsIjczIiwiNzQiLCI4MSIsIjgyIl0sIm1pbGVzdG9uZXMiOlsiMCJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJnIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI2OTQ1IiwiYmVzdCI6IjY5NDUiLCJ0b3RhbCI6IjY5NDUiLCJyZXNldFRpbWUiOjMzMC4xODgwMDAwMDAwMDA2NywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIxMzY5IiwiMTIiOiIxMzY5IiwiMTMiOiI0NTYuMzMzMzMzMzMzMzMzMyIsIjIxIjoiNjE0LjUifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0LDIxLDIyLDIzLDI0LDMxLDMyLDMzLDM0LDQxLDQyLDQzLDQ0XSwibWlsZXN0b25lcyI6WyIwIiwiMSJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJ6Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI1MCIsImJlc3QiOiI1MCIsInRvdGFsIjoiMTgxIiwicmVzZXRUaW1lIjozMzAuMTg4MDAwMDAwMDAwNjcsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0XSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiMTAiLCIxMSJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7IjExIjozLCIxMiI6MywiMjEiOjMsIjIyIjozfSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJ3Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIyLjQ5MDc4NDgwODExMTc0NGU4NzkxIiwibGFyZ2UiOiIyLjExNzQ3NTM2ODc4Njg4ODRlODc5IiwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjMzMC4xODgwMDAwMDAwMDA2NywiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiI1MCIsIjIxIjoiMCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMjEsMjIsMzIsMzEsNDEsNDIsMTMsMzMsMjMsNDMsNTEsNTIsNTMsMjQsNjEsNjIsNjMsMTQsMzQsNDQsNTQsNjQsNzEsNzIsNzMsNzQsODEsODIsODMsODQsOTEsOTIsOTMsOTQsMTAxLDEwMiwxMDMsMTA0XSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbCwiZmlzaCI6IjcwMDM5LjU5ODQ4MDc4ODU0In0sInIiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjI3OTMiLCJiZXN0IjoiMjc5MyIsInRvdGFsIjoiNTM5MyIsInJlc2V0VGltZSI6MzMwLjE4ODAwMDAwMDAwMDY3LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjEzOTYiLCIxMiI6IjkzMCIsIjEzIjoiMTM5NSIsIjIxIjoiNTU4IiwiMjIiOiI3MjIiLCIyMyI6IjQ2NCIsIjMxIjoiMjc3IiwiMzIiOiI2OTIiLCIzMyI6IjMwNiJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTQsMTEsMTIsMTMsMTUsMjEsMjIsMjMsMjQsMjUsMzEsMzIsMzMsMzQsMzVdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwicmVzZXRUaW1lcyI6MCwicmVzZWFyY2hlcnMiOiI1LjEwMjA1MjQ2MTUxNjMzN2UxNTU0In0sInQiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjU1NDY0OCIsImJlc3QiOiI1NTQ2NDgiLCJ0b3RhbCI6IjU1NDY0OCIsImxlYXZlcyI6IjcuMzc0MDcxNDQ3NDYzODEzZTI2IiwicmVzZXRUaW1lIjozMzAuMTg4MDAwMDAwMDAwNjcsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiMzAiLCIxMiI6IjMwIiwiMTMiOiIyMSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMTMsMTQsMjEsMzEsMzIsMzMsNDEsNDIsNDMsNDQsNTEsNjEsNzEsODIsODEsNzMsODMsNzIsOTFdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIiwiMiIsIjMiLCI0Il0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImJ1bGsiOmZhbHNlLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJlIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIzNSIsImVjb2xvZ3kiOiIxOTU5NTE1MTAuNzQ5MzM0ODQiLCJiZXN0IjoiMzUiLCJ0b3RhbCI6IjM1IiwiY29vbGRvd24iOiIwLjE2Mzk5OTk5OTk5OTk5OTU0IiwibGFzdEFiaWxpdHkiOjEyLCJhdXRvQWJpbGl0eSI6dHJ1ZSwicmVzZXRUaW1lIjozMzAuMTg4MDAwMDAwMDAwNjcsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiNjkifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIxMSI6dHJ1ZSwiMTIiOnRydWV9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxMSwxMiwxMywxNCwyMSwyMl0sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSJdLCJsYXN0TWlsZXN0b25lIjoiOSIsImFjaGlldmVtZW50cyI6WyIxMSIsIjEyIiwiMTMiLCIxNCIsIjE1IiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSJdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJibGFuayI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjQxMDUzLjM2OTk5OTk0MDU0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInRyZWUtdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6NDEwNTMuMzY5OTk5OTQwNTQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiZGV2U3BlZWQiOiIxIn0=")
            },
            style() {return{
                'background-color': tmp.w.color,
            }},
        },
        43: {
            title: "Reclaimed Ecosystems",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.re.color,
            }},
        },
        51: {
            title: "Natural Disasters",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.n.color,
            }},
        },
        52: {
            title: "Conservation Sites",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.c.color,
            }},
        },
        53: {
            title: "Bugs",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.n.color,
            }},
        },
        61: {
            title: "Mountains",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.m.color,
            }},
        },
        71: {
            title: "Quests",
            display: "Layer Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("")
            },
            style() {return{
                'background-color': tmp.q.color,
            }},
        },
        72: {
            title: "Rockets",
            display: "Section Finsihed",
            canClick: true,
            onClick() {
                if(!confirm("Your current progress will not be saved!")) return;
                importSave("eyJ0YWIiOiJvcHRpb25zLXRhYiIsIm5hdlRhYiI6InNvbGFyLXN5c3RlbSIsInRpbWUiOjE3MjgzMTk5MzE0NDQsIm5vdGlmeSI6e30sInZlcnNpb25UeXBlIjoidGhlbm9ueW1vdXMtdGhlcGxhbnR0cmVlMTc1ODY3NDUiLCJ2ZXJzaW9uIjoiMTMuMS0iLCJ0aW1lUGxheWVkIjo5NjkzMS4wMjk0MjE4OTI3NCwia2VlcEdvaW5nIjp0cnVlLCJoYXNOYU4iOnRydWUsInBvaW50cyI6ImVlMzguMDAwMDk4MTAzNzA5MDciLCJzdWJ0YWJzIjp7ImNoYW5nZWxvZy10YWIiOnt9LCJwIjp7Im1haW5UYWJzIjoiVHJlZXMifSwiYSI6eyJtYWluVGFicyI6IkFjaGlldmVtZW50cyJ9LCJlIjp7Im1haW5UYWJzIjoiTWFpbiJ9LCJ3Ijp7Im1haW5UYWJzIjoiTWFpbiJ9LCJyIjp7Im1haW5UYWJzIjoiTWluaWdhbWUifSwibiI6eyJtYWluVGFicyI6Ik1haW4ifSwiYyI6eyJtYWluVGFicyI6IkNvbnNlcnZhdGlvbiJ9LCJtIjp7Im1haW5UYWJzIjoiTW91bnRhaW5zIn0sInEiOnsibWFpblRhYnMiOiJRdWVzdHMifSwibmF2Ijp7Im1haW5UYWJzIjoiTmF2aWdhdGlvbiJ9LCJtZSI6eyJtYWluVGFicyI6IlJvY2tldHMifSwidmUiOnsibWFpblRhYnMiOiJSb2NrZXRzIn0sImVhIjp7Im1haW5UYWJzIjoiUm9ja2V0cyJ9LCJtYSI6eyJtYWluVGFicyI6Ik92ZXJ2aWV3In0sInNyIjp7Im1haW5UYWJzIjoiT3ZlcnZpZXcifX0sImxhc3RTYWZlVGFiIjoidmUiLCJzUG9pbnRzIjoiMCIsImluZm9ib3hlcyI6eyJhIjp7InBsYW50SGVscCI6ZmFsc2UsImdhcmRlbkhlbHAiOmZhbHNlLCJ6b25lSGVscCI6ZmFsc2UsIndpbGRsaWZlSGVscCI6ZmFsc2UsInJlc2VhcmNoSGVscCI6ZmFsc2UsInRyZWVIZWxwIjpmYWxzZX19LCJpbmZvLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjk2OTMxLjAyOTQyMTg5Mjc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sIm9wdGlvbnMtdGFiIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6OTY5MzEuMDI5NDIxODkyNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwiY2hhbmdlbG9nLXRhYiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjk2OTMxLjAyOTQyMTg5Mjc0LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImEiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6Ij8iLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6OTY5MzEuMDI5NDIxODkyNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIxMSI6IiIsIjEyIjoiIiwiMTMiOiIiLCIxNCI6IiIsIjIxIjoiIiwiMjIiOiIiLCIyMyI6IiIsIjMxIjoiIiwiMzIiOiIiLCIzMyI6IiIsIjQxIjoiIiwiNDIiOiIiLCI0MyI6IiIsIjUxIjoiIiwiNTIiOiIiLCI1MyI6IiIsIjYxIjoiIiwiNzEiOiIiLCI3MiI6IiJ9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiXSwibGFzdE1pbGVzdG9uZSI6IjAiLCJhY2hpZXZlbWVudHMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjIxIiwiMjIiLCIzNSIsIjI0IiwiMjMiLCIyNSIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiNDEiLCI0MiIsIjQ0IiwiNDMiLCI0NSIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI2MSIsIjYyIiwiNjMiLCI2NCIsIjY1IiwiNzEiLCI3MiIsIjczIiwiNzQiLCI3NSIsIjgxIiwiODIiLCI4MyIsIjg0IiwiODUiLCI5MSIsIjkyIiwiOTMiLCI5NCIsIjk1IiwiMTAxIiwiMTAyIiwiMTAzIiwiMTA0IiwiMTA1IiwiMTA2IiwiMTExIiwiMTEyIiwiMTEzIiwiMTE1IiwiMTE0IiwiMTIxIiwiMTIyIiwiMTIzIiwiMTI0IiwiMTI1IiwiMTMxIiwiMTMyIiwiMTMzIiwiMTM0IiwiMTM1IiwiMTQxIiwiMTQyIiwiMTQzIiwiMTQ0IiwiMTQ1Il0sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsInBsYXllck5hbWUiOiJQbGF5ZXIiLCJmcHMiOjIwLjA1ODA4Njk4MDQ0Nzc2fSwicCI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMi43Njk1NjkyMDczOTAxMjg0ZTQ0IiwiYmVzdCI6IjIuNzY5NTY5MjA3MzkwMTI4NGU0NCIsInRvdGFsIjoiMi43Njk1NjkyMDczOTM2NjNlNDQiLCJyZXNldFRpbWUiOjU1OTguNzkwMDAwMDAwMjE4LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjEwMDAwMDAwMDEiLCIxMiI6IjUuMDAxMTI5NTg4Mjk3NzQyZTM3IiwiMTMiOiIyMDAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WyIxMSIsIjEyIiwiMTMiLCIxNCIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiMzEiLCIzMiIsIjMzIiwiMzQiLCI0MSIsIjQyIiwiNDMiLCI0NCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI3MSIsIjcyIiwiNzMiLCI3NCIsIjgxIiwiODIiXSwibWlsZXN0b25lcyI6WyIwIl0sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbH0sImciOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjM3NjIyMTk5IiwiYmVzdCI6IjM3NjIyMTk5IiwidG90YWwiOiIzNzY4NDA4NyIsInJlc2V0VGltZSI6NTYwNy4zMzIwMDAwMDAyMDk1LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6Ijc1MjQ0MTkuODAwMDAwMDAxIiwiMTIiOiI3NTI0NDE5LjgwMDAwMDAwMSIsIjEzIjoiMjUwODEzOS45MzMzMzMzMzMiLCIyMSI6IjM3NjIxMzkuOTAwMDAwMDAwNCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbIjExIiwiMTIiLCIxMyIsIjE0IiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIjQxIiwiNDIiLCI0MyIsIjQ0IiwiNTEiLCI1MiIsIjUzIiwiNTQiXSwibWlsZXN0b25lcyI6WyIwIiwiMSJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJ6Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI2NzciLCJiZXN0IjoiNjc3IiwidG90YWwiOiIxNDY5IiwicmVzZXRUaW1lIjo1NjA3LjMzMjAwMDAwMDIwOTUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzExLDEyLDEzLDE0XSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiMTAiLCIxMSJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7IjExIjozLCIxMiI6MywiMjEiOjMsIjIyIjozfSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGx9LCJ3Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiJlZTI1Ljk5NTk4NzE4NzUzMjU0IiwibGFyZ2UiOiJlZTI0Ljk5NTI1MDk5ODEzNTY1MyIsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo1NjQxLjkyNzAwMDAwMDExNSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiI1MCIsIjIxIjoiMCJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbIjExIiwiMjEiLCIxMiIsIjIyIiwiMzEiLCI4MSIsIjkxIiwiOTIiLCIxMyIsIjIzIiwiMzIiLCI0MSIsIjQyIiwiODIiLCIxNCIsIjI0IiwiMzMiLCI0MyIsIjUxIiwiNTIiLCI1MyIsIjgzIiwiOTMiLCI5NCIsIjEwMSIsIjEwMiIsIjM0IiwiNDQiLCI1NCIsIjYxIiwiNjIiLCI2MyIsIjY0IiwiODQiLCIxMDMiLCIxMDQiLCI3MSIsIjcyIiwiNzMiLCI3NCIsIjExMSIsIjExMiIsIjExMyIsIjExNCJdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsLCJmaXNoIjoiNC4xNTM1NzgyMDk1NjE1OTdlNDQiLCJhdXRvVXBncmFkZSI6dHJ1ZSwiY2FuQnV5MTE0Ijp0cnVlfSwiciI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMS4zOTg4NDE3MzgxNzM2NjY0ZTIwIiwiYmVzdCI6IjEuMzk4ODQxNzM4MTczNjY2NGUyMCIsInRvdGFsIjoiMS4zOTg4NDE3MzgxNzM2NjY0ZTIwIiwicmVzZXRUaW1lIjo1NjA3LjMzMjAwMDAwMDIwOTUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7IjExIjoiNi45OTQyMDg2OTA4NjgzMzFlMTkiLCIxMiI6IjQuNjYyODA1NzkzOTEyMjE5ZTE5IiwiMTMiOiI2Ljk5NDIwODY5MDg2ODMzMWUxOSIsIjIxIjoiMi43OTc2ODM0NzYzNDczMzMzZTE5IiwiMjIiOiI0MTgwMTk1IiwiMjMiOiIyLjMzMTQwMjg5Njk1NjEwOWUxOSIsIjMxIjoiMS4zOTg4NDE3MzgxNzM2NjY0ZTE5IiwiMzIiOiIzLjQ5NzEwNDM0NTQzNDE2NWUxOSIsIjMzIjoiMS41NTQyNjg1OTc5NzA3MzkxZTE5IiwiNDEiOiIxLjM5ODg0MTczODE3MzY2NjRlMTkiLCI0MiI6IjIuNzk3NjgzNDc2MzQ3MzMzM2UxOCIsIjQzIjoiMS4zOTg4NDE3MzgxNzM2NjY0ZTE5In0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnsiMTEiOnRydWUsIjEyIjoiIiwiMTMiOiIiLCIxNCI6IiIsIjE1IjoiIiwiMTYiOiIiLCIyMSI6IiIsIjIyIjp0cnVlLCIyMyI6dHJ1ZSwiMjQiOnRydWUsIjI1Ijp0cnVlLCIyNiI6dHJ1ZSwiMzEiOiIiLCIzMiI6dHJ1ZSwiMzMiOnRydWUsIjM0Ijp0cnVlLCIzNSI6dHJ1ZSwiMzYiOnRydWUsIjQxIjoiIiwiNDIiOnRydWUsIjQzIjp0cnVlLCI0NCI6dHJ1ZSwiNDUiOnRydWUsIjQ2Ijp0cnVlLCI1MSI6IiIsIjUyIjp0cnVlLCI1MyI6dHJ1ZSwiNTQiOnRydWUsIjU1Ijp0cnVlLCI1NiI6dHJ1ZSwiNjEiOiIiLCI2MiI6dHJ1ZSwiNjMiOnRydWUsIjY0Ijp0cnVlLCI2NSI6dHJ1ZSwiNjYiOnRydWV9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxNCwxMSwxMywxMiwxNSwyNSwyNCwyMywyMiwyMSwzMywzMSwzMiwxNCwxNCwzNCwzNSwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNF0sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJyZXNldFRpbWVzIjowLCJyZXNlYXJjaGVycyI6ImVlMjAuNjQwMDk5NDQzMzI4OSJ9LCJ0Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIxLjA3OTIyMDY3OTA3MzI2MjFlMzkiLCJiZXN0IjoiMS4wNzkyMjA2NzkwNzMyNjIxZTM5IiwidG90YWwiOiIxLjA3OTIyMDY3OTA3MzI3OTdlMzkiLCJsZWF2ZXMiOiIyLjg5NDAzNzY5NDc5NzExNGU2NiIsInJlc2V0VGltZSI6NTYwNy4zMzIwMDAwMDAyMDk1LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjMwIiwiMTIiOiIzMCIsIjEzIjoiMzAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6WzEzLDE0LCIxMSIsIjIxIiwiMzEiLCI0MSIsIjUxIiwiNjEiLCIxMiIsIjEzIiwiMTQiLCIzMiIsIjMzIiwiNDIiLCI0MyIsIjQ0IiwiNzEiLCI4MiIsIjgxIiwiNzMiLCI4MyIsIjcyIiwiOTEiLDEzLDE0LCIxMzEiLDEzLDE0LCIxMjEiLCIxMTEiLCIxMDEiXSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCJdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJidWxrIjpmYWxzZSwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsLCJhdXRvVXBncmFkZSI6dHJ1ZX0sImUiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjExODUiLCJlY29sb2d5IjoiNC41NTcxOTE5MTA0MjYzMDU0ZTUxNCIsImJlc3QiOiIxMTg1IiwidG90YWwiOiI3NjgiLCJjb29sZG93biI6IjcuMzgwOTk5OTk5OTk5OTk0IiwibGFzdEFiaWxpdHkiOjExLCJhdXRvQWJpbGl0eSI6dHJ1ZSwicmVzZXRUaW1lIjo1NjA3Ljk4MjAwMDAwMDIwOCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIxMjAifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIxMSI6dHJ1ZSwiMTIiOnRydWV9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsiMTEiLCIxMiIsIjEzIiwiMTQiLCIyMSIsIjIyIiwiMjMiLCIyNCJdLCJtaWxlc3RvbmVzIjpbIjAiLCIzIiwiNSIsIjciLCI5IiwiMiIsIjQiLCI2IiwiOCIsIjEiXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIyMSIsIjIyIiwiMjMiLCIyNCIsIjI1Il0sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiIsImFjdGl2ZUNoYWxsZW5nZSI6bnVsbCwiYXV0b1Jlc2V0Ijp0cnVlLCJhdXRvVXBncmFkZSI6dHJ1ZX0sInJlIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIxMjgiLCJiZXN0IjoiMTI4IiwidG90YWwiOiIxMjgiLCJyZXNldFRpbWUiOjU2MDcuOTgyMDAwMDAwMjA4LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIiwiMiIsIjMiLCI0Il0sImxhc3RNaWxlc3RvbmUiOiI0IiwiYWNoaWV2ZW1lbnRzIjpbIjI0IiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMjEiLCIyMiIsIjIzIl0sImNoYWxsZW5nZXMiOnsiMTEiOjMsIjEyIjozLCIyMSI6M30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsLCJhdXRvUmVzZXQiOnRydWV9LCJuIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIwIiwiYmVzdCI6IjAiLCJ0b3RhbCI6IjAiLCJhc2giOiIzLjI5MzA5NjY5MjUyMDAxMTRlNjciLCJzb2lsIjoiMS45MDM4MDgwMjA5NjAzOTc0ZTM2IiwibWFnIjoiMi4zOTI0ODgwNTQ4NjE3MTM2ZTE5IiwiZW5lcmd5IjoiNzU1NTIuMTAwNzc3Mzc4NzkiLCJyZXNldFRpbWUiOjU2MDcuMzMyMDAwMDAwMjA5NSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7IjExIjp0cnVlfSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbIjMxIiwiMzIiLCIxMSIsIjEyIiwiMTMiLCIxNCIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiNDEiLCI0MiIsIjQzIiwiNDQiLCI2MSIsIjYyIiwiNjMiLCI2NCIsIjcxIiwiNzIiLCI3MyIsIjc0Il0sIm1pbGVzdG9uZXMiOlsiMTAyIiwiMTAwIiwiMTAxIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciXSwibGFzdE1pbGVzdG9uZSI6IjciLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7IjExIjowLCIxMiI6MCwiMTMiOjAsIjE0IjowfSwiZ3JpZCI6e30sInByZXZUYWIiOiIiLCJhY3RpdmVDaGFsbGVuZ2UiOm51bGwsInBsYW50QnVnIjpmYWxzZSwid2lsZGxpZmVCdWciOmZhbHNlLCJyZXNlYXJjaEJ1ZyI6ZmFsc2UsImJlZXMiOiIyMjgwLjAwNTg4NjIyMjU0NCIsInNwaWRlcnMiOiIyMjgwLjAwNTg4NjIyMjU0NCIsImJ1dHRlcmZsaWVzIjoiMTE1MTAyMy4yNDI4MTI1MzQzIiwiYXV0b1VwZ3JhZGUiOnRydWV9LCJjIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIxNiIsImNvbnNlcnZhdGlvbiI6IjEuMTcyMzM0NTU0NzY5MjQwM2U0MTAiLCJiZXN0IjoiMTYiLCJ0b3RhbCI6IjE2IiwicmVzZXRUaW1lIjo1NjQxLjkyNzAwMDAwMDExNSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIyNzciLCIxMiI6IjI3NyIsIjEzIjoiMzUifSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIxMSI6IiJ9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOlsxMSwxMiwxMywxNCwxNSwyMSwyMiwyMywyNCwyNSwzMSwzMiwzMywzNCwzNSw0MSw0Miw0Myw0NCw0NSw1MSw1Miw1Myw1NCw1NV0sIm1pbGVzdG9uZXMiOlsiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4Il0sImxhc3RNaWxlc3RvbmUiOiI4IiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsLCJhdXRvQ2xpY2thYmxlIjpmYWxzZX0sIm0iOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjEwMDEiLCJiZXN0IjoiMTAwMSIsInRvdGFsIjoiMzMyMiIsInJlc2V0VGltZSI6NTYwNy4zMzIwMDAwMDAyMDk1LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6eyIxMSI6IjI1IiwiMTIiOiIxNSIsIjEzIjoiOSJ9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbMTEsMTIsMTMsMjEsMjIsMjMsMzEsMzIsMzNdLCJtaWxlc3RvbmVzIjpbIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIiwiYWN0aXZlQ2hhbGxlbmdlIjpudWxsLCJjb29sZG93biI6Ii01MDQxLjIxMzk5MTk5ODIzNyJ9LCJxIjp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiI2IiwidG9rZW5zIjoiOC4xOTc4MzI4MTI0OTk5OTQiLCJxdWVzdHMiOnsiY29tcG9zdCI6IjIiLCJnYXJkZW4iOiIyIiwiYmVla2VlcGluZyI6IjIifSwiY29tcG9zdCI6IjAiLCJjb21wb3N0TGV2ZWwiOiIwIiwiaG9uZXkiOiIwIiwicmVzZXRUaW1lIjo0MDI2LjAxMzAwMDAwMTAxNjcsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnsiMTEiOiIwIiwiMTIiOiIwIiwiMTMiOiIwIiwiMjEiOiIwIiwiMzEiOiIwIiwiMzIiOiIwIiwiNDEiOiIwIiwiNDIiOiIwIiwiNDMiOiIwIn0sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbIjAiXSwibGFzdE1pbGVzdG9uZSI6IjAiLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwibmF2Ijp7InVubG9ja2VkIjp0cnVlLCJwb2ludHMiOiIwIiwiYmVzdCI6IjAiLCJ0b3RhbCI6IjAiLCJyZXNldFRpbWUiOjQ5NzEuMTMxMDAwMDAwNjg5LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnsiMTEiOiIiLCIyMSI6IiIsIjMxIjoiIn0sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwibWUiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsInJlc2V0VGltZSI6NDk3MS4xMzEwMDAwMDA2ODksInJlc291cmNlcyI6eyJtZXRhbCI6IjE1Ljc5NDAwNDY4ODM2MDMxNyIsImdsYXNzIjoiMC4wMDMyMTM3MTEyMDgyNzIxMTkzIiwic29pbCI6IjQ0LjkyMjY3NDcyMjM4NzE5Iiwicm9ja2V0cyI6IjAiLCJwbGFudHMiOiIxMDAwMCJ9LCJpbmZyYSI6eyJwYW5lbHMiOiIxMDAiLCJsYXVuY2hQYWQiOnRydWUsImdyZWVuaG91c2VzIjoiMTAwIn0sInNoaXBMb2FkIjp7Im1ldGFsIjoiMCIsImdsYXNzIjoiMCIsInNvaWwiOiIwIiwicGxhbnRzIjoiMCJ9LCJ3aWxkbGlmZSI6eyJoZXJiaXZvcmVzIjoiNDIuMjU4NjEwNjEwMDI2MjUiLCJjYXJuaXZvcmVzIjoiMC4zOTg0ODIyMjIxNTkyNTE0In0sImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIyMSI6IiIsIjIyIjoiIiwiMjMiOiIiLCIyNCI6IiIsIjMxIjoiIiwiMzIiOiIiLCIzMyI6IiIsIjM0IjoiIiwiNDEiOiIiLCI0MiI6IiIsIjQzIjoiIn0sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidmUiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsInJlc2V0VGltZSI6NDk3MS4xMzEwMDAwMDA2ODksInJlc291cmNlcyI6eyJtZXRhbCI6IjAuMDAwMDE0OTQ4NDAzMTYxMDc1Nzc0IiwiZ2xhc3MiOiIwLjAwMDI3NTQ4Njc5NDM4MTMwNzIiLCJzb2lsIjoiMCIsInJvY2tldHMiOiIwIiwicGxhbnRzIjoiMi43Njk1NjkyMDczOTAxMjg0ZTQ0In0sImluZnJhIjp7InBhbmVscyI6IjEwIiwibGF1bmNoUGFkIjp0cnVlLCJncmVlbmhvdXNlcyI6IjAifSwic2hpcExvYWQiOnsibWV0YWwiOiIwIiwiZ2xhc3MiOiIwIiwic29pbCI6IjAiLCJwbGFudHMiOiIwIn0sIndpbGRsaWZlIjp7ImhlcmJpdm9yZXMiOiIyLjMzNzA5NzYxMTk0Njg5MDVlMzUiLCJjYXJuaXZvcmVzIjoiNi40MTU1MDMxMDY5ODQ5MDRlMjcifSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7IjExIjoiIiwiMjEiOiIiLCIyMiI6IiIsIjIzIjoiIiwiMzEiOiIiLCIzMiI6IiIsIjMzIjoiIiwiMzQiOiIiLCI0MSI6IiIsIjQyIjoiIiwiNDMiOiIifSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJlYSI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiMCIsImJlc3QiOiIwIiwidG90YWwiOiIwIiwicmVzZXRUaW1lIjo0OTcxLjEzMTAwMDAwMDY4OSwibW9uZXkiOiI3MTY4MC4wNTk2OTUwMzMxMiIsInJlc291cmNlcyI6eyJtZXRhbCI6IjEzNi4wMDE2NDMwOTM4OTg0NSIsImdsYXNzIjoiNS4wNTQ2MjgxNzQ1NDM0NzMiLCJzb2lsIjoiMjg2Ni4xMzk1MzM4NTA1NDEiLCJyb2NrZXRzIjoiMCIsInBsYW50cyI6IjIwMC4wMDA0MjQyNjIxODY1MyJ9LCJjbGlja2FibGVEYXRhIjp7ImNvb2xkb3duIjoiMC4zOTc5OTk5OTk5OTk5OTk5NiJ9LCJpbmZyYSI6eyJwYW5lbHMiOiI2IiwibGF1bmNoUGFkIjp0cnVlfSwic2hpcExvYWQiOnsibWV0YWwiOiIwIiwiZ2xhc3MiOiIwIiwic29pbCI6IjAiLCJwbGFudHMiOiIwIn0sIndpbGRsaWZlIjp7ImhlcmJpdm9yZXMiOiIwIiwiY2Fybml2b3JlcyI6IjAifSwiYXV0b1NlbGwiOnRydWUsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6eyIxMSI6IiIsIjEyIjoiIiwiMTMiOiIiLCIxNCI6IiIsIjIxIjoiIiwiMjIiOiIiLCIyMyI6IiIsIjMxIjoiIiwiMzIiOiIiLCIzMyI6IiIsIjM0IjoiIiwiNDEiOiIiLCI0MiI6IiIsIjQzIjoiIn0sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwibWEiOnsidW5sb2NrZWQiOnRydWUsInBvaW50cyI6IjAiLCJiZXN0IjoiMCIsInRvdGFsIjoiMCIsInJlc2V0VGltZSI6NDk3MS4xMzEwMDAwMDA2ODksInJlc291cmNlcyI6eyJtZXRhbCI6Ijk5LjAwNDMzNzI2OTMzODE0IiwiZ2xhc3MiOiI3My43OTE4ODI2Mjc0NTM3MyIsInNvaWwiOiIyMTA2LjkzNzc5MTQyNzA3MTciLCJyb2NrZXRzIjoiMjQiLCJwbGFudHMiOiIxMDAwMCJ9LCJpbmZyYSI6eyJwYW5lbHMiOiIxMDAiLCJsYXVuY2hQYWQiOnRydWUsImdyZWVuaG91c2VzIjoiMTAwIn0sInNoaXBMb2FkIjp7Im1ldGFsIjoiMCIsImdsYXNzIjoiMCIsInNvaWwiOiIwIiwicGxhbnRzIjoiMCJ9LCJ3aWxkbGlmZSI6eyJoZXJiaXZvcmVzIjoiMTUuNjc2NTYxMjE5OTI2NTk3IiwiY2Fybml2b3JlcyI6IjAuMTI0Mjg2MDE2NzUyNDc0MDMifSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7IjIxIjoiIiwiMjIiOiIiLCIyMyI6IiIsIjI0IjoiIiwiMzEiOiIiLCIzMiI6IiIsIjMzIjoiIiwiMzQiOiIiLCI0MSI6IiIsIjQyIjoiIiwiNDMiOiIifSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJzciI6eyJ1bmxvY2tlZCI6dHJ1ZSwicG9pbnRzIjoiNDA2MTQ5OS4xNjUyODQwNjM3IiwiYmVzdCI6IjYxNzgxMjMuMzE2MjQ4NzYzIiwidG90YWwiOiIwIiwicmVzZXRUaW1lIjo0OTcxLjEzMTAwMDAwMDY4OSwidmlzaXRlZCI6dHJ1ZSwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7IjExIjoiIiwiMTIiOiIiLCIxMyI6IiIsIjE0IjoiIiwiMTUiOiIifSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6WyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2Il0sImxhc3RNaWxlc3RvbmUiOiI2IiwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImJsYW5rIjp7InVubG9ja2VkIjp0cnVlLCJ0b3RhbCI6IjAiLCJiZXN0IjoiMCIsInJlc2V0VGltZSI6OTY5MzEuMDI5NDIxODkyNzQsImZvcmNlVG9vbHRpcCI6ZmFsc2UsImJ1eWFibGVzIjp7fSwibm9SZXNwZWNDb25maXJtIjpmYWxzZSwiY2xpY2thYmxlcyI6e30sInNwZW50T25CdXlhYmxlcyI6IjAiLCJ1cGdyYWRlcyI6W10sIm1pbGVzdG9uZXMiOltdLCJsYXN0TWlsZXN0b25lIjpudWxsLCJhY2hpZXZlbWVudHMiOltdLCJjaGFsbGVuZ2VzIjp7fSwiZ3JpZCI6e30sInByZXZUYWIiOiIifSwidHJlZS10YWIiOnsidW5sb2NrZWQiOnRydWUsInRvdGFsIjoiMCIsImJlc3QiOiIwIiwicmVzZXRUaW1lIjo5NjkzMS4wMjk0MjE4OTI3NCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJUMSI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjQ5NzEuMTMxMDAwMDAwNjg5LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sInNvbGFyLXN5c3RlbSI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjQ5NzEuMTMxMDAwMDAwNjg5LCJmb3JjZVRvb2x0aXAiOmZhbHNlLCJidXlhYmxlcyI6e30sIm5vUmVzcGVjQ29uZmlybSI6ZmFsc2UsImNsaWNrYWJsZXMiOnt9LCJzcGVudE9uQnV5YWJsZXMiOiIwIiwidXBncmFkZXMiOltdLCJtaWxlc3RvbmVzIjpbXSwibGFzdE1pbGVzdG9uZSI6bnVsbCwiYWNoaWV2ZW1lbnRzIjpbXSwiY2hhbGxlbmdlcyI6e30sImdyaWQiOnt9LCJwcmV2VGFiIjoiIn0sImJsYW5rMiI6eyJ1bmxvY2tlZCI6dHJ1ZSwidG90YWwiOiIwIiwiYmVzdCI6IjAiLCJyZXNldFRpbWUiOjE2Mzk5LjMwMjEyMTUwNTE3OCwiZm9yY2VUb29sdGlwIjpmYWxzZSwiYnV5YWJsZXMiOnt9LCJub1Jlc3BlY0NvbmZpcm0iOmZhbHNlLCJjbGlja2FibGVzIjp7fSwic3BlbnRPbkJ1eWFibGVzIjoiMCIsInVwZ3JhZGVzIjpbXSwibWlsZXN0b25lcyI6W10sImxhc3RNaWxlc3RvbmUiOm51bGwsImFjaGlldmVtZW50cyI6W10sImNoYWxsZW5nZXMiOnt9LCJncmlkIjp7fSwicHJldlRhYiI6IiJ9LCJkZXZTcGVlZCI6IjEifQ==")
            },
            style() {return{
                'background-color': tmp.sr.color,
            }},
        },
    },
    achievements: {
        11: {
            name: "1st Plant!",
            done() {return player.p.points.gte(1)},
            tooltip: "Buy your first Plant",
        },
        12: {
            name: "Combined",
            done() {return hasUpgrade('p', 11)},
            tooltip: "Buy a Sedum Succulent",
        },
        13: {
            name: "What does Magnitude mean?",
            done() {return hasUpgrade('p', 14)},
            tooltip: `Buy a Snake Plant <br>
            Magnitude of x: log10(x)`,
        },
        14: {
            name: "What does divided mean?",
            done() {return hasUpgrade('p', 22)},
            tooltip: "Buy an Anthurium",
        },
        15: {
            name: "MORE SPACE",
            done() {return player.g.points.gte(1)},
            tooltip: "Get a new Garden",
        },
        21: {
            name: "Costco sells plants now!",
            done() {return getResetGain('p').gte(50)},
            tooltip: "Bulk buy 50 Plants at once. Reward: Unlock a Garden Milestone",
        },
        22: {
            name: "Plant Central",
            done() {return player.p.points.gte(100)},
            tooltip: "Have 100 Plants",
        },
        23: {
            name: "Prickly Pears from IKEA",
            done() {return tmp.p.buyables[11].cost.lte(3)},
            tooltip: "Make Prickly Pears cheaper than 3 Plants. Reward: Keep plant upgrades on Garden reset",
        },
        24: {
            name: "\"Having a Garden improves your quality of life\"",
            done() {return hasMilestone('g', 0)},
            tooltip: "Get a Garden Milestone. Reward: Prickly Pears don't use up Plants",
        },
        25: {
            name: "BETTER SPACE",
            done() {return player.z.points.gte(1)},
            tooltip: "Get a new Zone",
        },
        31: {
            name: "Hard Work!",
            done() {return challengeCompletions('z', 11) >= 3},
            tooltip: "Fully Complete the Tropical Zone",
        },
        32: {
            name: "Prickly Pears from the Desert",
            done() {return tmp.p.buyables[11].cost.lte(0.01)},
            tooltip: "Make Prickly Pears cheaper than 0.01 Plants",
        },
        33: {
            name: "Didn't know there was that much space",
            done() {return inChallenge('z', 12) && player.p.points.gte(370)},
            tooltip: "Get 370 Plants in The Alpine Zone. Reward: 2x Point gain under 3 Zones",
        },
        34: {
            name: "You need more containers",
            done() {return getBuyableAmount('p', 13).gte(100)},
            tooltip: "Reach the Echinocactus Limit. Reward: Keep Plant Buyables on Garden Reset",
        },
        35: {
            name: "Wildlife Central",
            done() {return player.w.points.gte(100)},
            tooltip: "Reach 100 Wildlife",
        },
        41: {
            name: "Real Wildlife!",
            done() {return hasUpgrade('w', 31)},
            tooltip: "Attract your first Animal to the Garden",
        },
        42: {
            name: "More Resources?",
            done() {return hasUpgrade('w', 33)},
            tooltip: "Attract a Bear to your garden",
        },
        43: {
            name: "Habitat Master",
            done() {return hasUpgrade('w', 14)},
            tooltip: "Obtain All the Habitats",
        },
        44: {
            name: "Daft Wildlife",
            done() {return hasUpgrade('w', 24)},
            tooltip: "Complete the Reference",
        },
        45: {
            name: "Sassy Wildlife",
            done() {return hasUpgrade('w', 64)},
            tooltip: "Attract a Fox to your Garden",
        },
        51: {
            name: "Time Portal",
            done() {return getBuyableAmount('r', 21).gte(1)},
            tooltip: "Buy a Time Speed Increase",
        },
        52: {
            name: "Time Walrus",
            done() {return getBuyableAmount('r', 12).gte(2)},
            tooltip: "Unlock More Wildlife Upgrades",
        },
        53: {
            name: "<i>RETURN OF THE MAGNITUDE",
            done() {return hasUpgrade('r', 14)},
            tooltip: "Buy Plant Robotics",
        },
        54: {
            name: "Finally, Some Satisfaction!",
            done() {return hasUpgrade('r', 22)},
            tooltip: "Get an Overpowered Boost from a Certain Research Upgrade",
        },
        55: {
            name: "But <i>What is</i> this you Speak of?",
            done() {return hasUpgrade('r', 25)},
            tooltip: "Achieve a Scientific Breakthrough!",
        },
        61: {
            name: "The Knockoff Trees",
            done() {return player.t.leaves.gte(300)},
            tooltip: "Get 300 Leaves",
        },
        62: {
            name: "You Can Stop Now",
            done() {return tmp.r.baseAmount.gte(new Decimal("1.80e308"))},
            tooltip: "Research for Infinitely (1.8e308) Long",
        },
        63: {
            name: "This Isn't How The Food Chain Works...",
            done() {return player.w.points.dividedBy(player.p.points.add(1)).gte(new Decimal("1.80e308"))},
            tooltip: "Have Infinite (1.8e308) Wildlife per Plant",
        },
        64: {
            name: "Recursion",
            done() {return hasUpgrade('t', 61)},
            tooltip: "Play The Plant Tree Inside of The Plant Tree",
        },
        65: {
            name: "What Does This Mean?",
            done() {return hasUpgrade('t', 91)},
            tooltip: "Buy a Row 3 Plant Tree Upgrade?",
        },
        71: {
            name: "Sub-Milestones?",
            done() {return hasMilestone('e', 1)},
            tooltip: "Get Ecosystem Milestone 2",
        },
        72: {
            name: "Prickly Pears from <i>the Void</i>",
            done() {return tmp.p.buyables[11].cost.lt("1.80e-308")},
            tooltip: "Make Prickly Pears Cheaper Than 1.80e-308 Plants, Don't worry, this will be out of order",
        },
        73: {
            name: "Quality OF LIFE",
            done() {return player.e.points.gte(2)},
            tooltip: "Gain a Second Ecosystem. Reward: Divide Ecosystem Requirements by 1.20",
        },
        74: {
            name() {return hasMilestone('e', 9) ? `<font size = "-2"> Wait... holup... holy frick is that an achievement outside of the achievements layer!? bro</font>` : "Uh oh, this achievement name contains spoilers!"},
            done() {return hasMilestone('e', 9)},
            tooltip: "Begin Generation of Ecology",
        },
        75: {
            name: "<i>SUS</i>TAINABLE SPACE",
            done() {return hasUpgrade('e', 14)},
            tooltip: "Buy '100% Recycled Materials'",
        },
        81: {
            name: "The Fishing Trip",
            done() {return player.w.fish.gte(50)},
            tooltip: "Find 50 Fish",
        },
        82: {
            name: "You Need More Trash Cans",
            done() {return getBuyableAmount('e', 11).gte(50)},
            tooltip: "Recycle 50 Times",
        },
        83: {
            name: "EPA <br><font size = -2>(Ecological Plant Agency)</font>",
            done() {return player.r.points.gte(1200)},
            tooltip: "Achieve 1,200 Research. Reward: Research Speed x2",
        },
        84: {
            name: "The Plants...",
            done() {return player.p.points.gte("1e8")},
            tooltip: "100,000,000 Plants",
        },
        85: {
            name: "AMERICAN SPACE",
            done() {return hasUpgrade('z', 14)},
            tooltip: "Get 'Americas Inspired Zone'",
        },
        91: {
            name: "Cleaning - Fish Edition",
            done() {return completionDecimal('re', 11).gte(2)},
            tooltip: "Complete 'Polluted Ocean' Twice",
        },
        92: {
            name: "Ecosystem Lost",
            done() {return hasUpgrade('w', 114)},
            tooltip: "Buy a Koi",
        },
        93: {
            name: "The Reclaimer",
            done() {return player.re.points.gte(3)},
            tooltip: "Reclaim 3 Ecosystems <br><font size = -1>(Get 3 Reclaimed Ecosystems)</font>",
        },
        94: {
            name: "Just 1 More Completion...",
            done() {return completionDecimal('re', 21).gte(2)},
            tooltip: "Complete 'Abandoned Quarry' Twice",
        },
        95: {
            name: "<font size = -1>PLACES WHICH HELP YOU GET BETTER SPACE</font>",
            done() {return hasUpgrade('g', 54)},
            tooltip: "Buy 'Tipi'",
        },
        101: {
            name: "Volcanic Survival",
            done() {return player.n.ash.gte(69)},
            tooltip: "Get 69 Volcanic ash",
            style: {
                height: '75px',
                width: '70px',
            },
        },
        102: {
            name: "Volcanic Shock",
            done() {return hasUpgrade('p', 13) && msReady && inChallenge('n', 11)},
            tooltip: "Get a Jade Plant in 'Eruption'<br>Read the challenge effects now",
            style: {
                height: '75px',
                width: '70px',
            },
        },
        103: {
            name: "AAAA",
            done() {return hasUpgrade('n', 31)},
            tooltip: "Unlock an Earthquake",
            style: {
                height: '75px',
                width: '70px',
            },
        },
        104: {
            name: "AAAA squared",
            done() {return hasUpgrade('n', 32)},
            tooltip: "Unlock a Hurricane",
            style: {
                height: '75px',
                width: '70px',
            },
        },
        105: {
            name: "Double Exponential",
            done() {return player.points.gte("e1e9")},
            tooltip: "Reach e1.000e9 Points",
            style: {
                height: '75px',
                width: '70px',
            },
        },
        106: {
            name: "Protected Ecosystems?",
            done() {return hasMilestone('n', 2)},
            tooltip: "Get the 3rd Disaster Milestone",
            style: {
                height: '75px',
                width: '100px',
            },
        },
        111: {
            name: "Wait are we building a house?",
            done() {return hasUpgrade('c', 11)},
            tooltip: "Buy 'Conservation Upgrade Foundation'",
        },
        112: {
            name: "No, we must be making a robot...",
            done() {return hasUpgrade('c', 15)},
            tooltip: "Buy 'Plant Robotics MK III'",
        },
        113: {
            name: "Huh, we made a conservation site...",
            done() {return player.c.points.gte(2)},
            tooltip: "Reach 2 Conservation Sites",
        },
        114: {
            name: "Degenerate Gambler",
            done() {return tmp.r.minigameScore.gte(244140625)},
            tooltip: "Complete the research minigame",
        },
        115: {
            name: "Programming be like:",
            done() {return hasMilestone('c', 3)},
            tooltip: "Complete the 4th Conservation Milestone",
        },
        121: {
            name: "Why did you not do this sooner?",
            done() {return hasMilestone('n', 100)},
            tooltip: "Get 1 Bee",
        },
        122: {
            name: "Oh no, these are like rabbits...",
            done() {return hasMilestone('n', 102)},
            tooltip: "Get 1 Butterfly",
        },
        123: {
            name: "Is that a tuba's tree reference???",
            done() {return hasUpgrade('c', 45)},
            tooltip: "See various levels of inflation",
        },
        124: {
            name: "Challenge? No.",
            done() {return hasUpgrade('c', 53)},
            tooltip: "Make it so that there's no reason to go into 'Bug Infestation'",
        },
        125: {
            name: "...So what are we trying to do here?",
            done() {return hasMilestone('n', 6)},
            tooltip: "Get 18 septillion trees",
        },

        131: {
            name: "Prologue",
            done() {return player.m.points.gte(1)},
            tooltip: "Get 1 Mountain",
        },
        132: {
            name: "Pyramid?",
            done() {return hasUpgrade('m', 31)},
            tooltip: "Get 'Mountain Mountain'",
        },
        133: {
            name: "HMMMM",
            done() {return tmp.m.totalBuyables.gte(1)},
            tooltip: "Get a mountain buyable",
        },
        134: {
            name: "We can't lose, right?",
            done() {return player.c.conservation.gte("1.80e308")},
            tooltip: "Reach 1.80e308 conservation",
        },
        135: {
            name: "Farewell",
            done() {return hasMilestone('n', 7)},
            tooltip: "Reach e1.000e38 points",
        },
        141: {
            name: "OUTER SPACE",
            done() {return hasMilestone('q', 0)},
            tooltip: "Complete 6 quests",
        },
        142: {
            name: "The Thruster",
            done() {return player.me.resources.rockets.gte(1) || player.ve.resources.rockets.gte(1) || player.ea.resources.rockets.gte(1) || player.ma.resources.rockets.gte(1)},
            tooltip: "Build a rocket",
        },
        143: {
            name: "Alien",
            done() {return (player.me.infra.greenhouses.gte(1) && player.me.resources.plants.gte(1)) || (player.ma.infra.greenhouses.gte(1) && player.ma.resources.plants.gte(1))},
            tooltip: "Put a plant in a greenhouse either on Mercury or on Mars",
        },
        144: {
            name: "Arbitrary Goals",
            done() {return hasMilestone('sr', 4)},
            tooltip: "Complete 5 solar research milestones",
        },
        145: {
            name: "Terra-bly form-ed joke",
            done() {return tmp.me.atmosphere.gte(1) || tmp.ma.atmosphere.gte(1)},
            tooltip: "Reach 100% atmospheric integrity on Mercury or Mars",
        },
    },
}),
addLayer("p", { // Plants layer
    name: "plants", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üå¥" : "P"},
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
        resetTime: 0,
    }},
    tree: "tree-tab",
    color: "#27B000",
    requires() {return 10}, // Can be a function that takes requirement increases into account
    resource: "plants", // Name of prestige currency
    baseResource: "points", // Name of resource prestige is based on
    baseAmount() {
        let amt = player.points.max(0)
        amt = amt.pow(smartUpgradeEffect('n', 61))
        if(inChallenge('n', 12)) amt = amt.div(amt.add(1).log(10).add(1))
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent() {
        let exponent = new Decimal(1-smartUpgradeEffect('z', 13, 0))
        if(inCompletion('re', 21, 2)) exponent = exponent.add(1)
        exponent = exponent.times(smartUpgradeEffect('w', 112))
        return exponent
    }, // Prestige currency exponent
    base() {let base = 2
    if(hasUpgrade('p', 43)){base -= 0.1}
    if(new Decimal(getBuyableAmount('p', 13)).gte(1)){base = new Decimal(1).add(new Decimal(base).minus(1).times(buyableEffect('p', 13)))}
    return base},
    canBuyMax: true,
    autoPrestige() {return hasMilestone('g', 0)},
    resetsNothing() {return hasMilestone('g', 0)},
    autoUpgrade() {return hasMilestone('e', 5)},
    branches: ['g', 'z'],
    tooltip() {
        let tooltip = formatWhole(player.p.points)+" Plants"
        if(hasUpgrade('r', 25)) tooltip = tooltip + "<br><font size = -1>"+formatWhole(player.t.points)+" Trees</font>"
        return tooltip
    },
    deactivated() {return inCompletion('re', 12, 2)},
    tabFormat: {
        "Plants": {
            content: [
                "main-display",
                "prestige-button",
                "blank",
                "blank",
                "milestones",
                "blank",
                "blank",
                "buyables",
                "blank",
                "blank",
                "upgrades",
                ],
        },
        "Trees": {
            embedLayer: 't',
            unlocked() {return hasUpgrade('r', 25) || hasMilestone('e', 5) || hasUpgrade('n', 44) || getClickableState('n', 11)},
        },
    },
    effectDescription() {if(hasUpgrade('p', 14)) return "Next Magnitude increase at "+format(new Decimal(10).add(upgradeEffect('p', 34)).pow(player.points.max(0).add(1).log(new Decimal(10).add(upgradeEffect('p', 34))).ceil()))+" Points (1-4, 2-2)"},
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;
        
        let keep = [];
        keep.push("milestones");
        if (hasAchievement('a', 23) && resettingLayer==='g') keep.push("upgrades");
        if (hasUpgrade('n', 14) && row <= 3) keep.push("upgrades");
        if (hasAchievement('a', 34) && resettingLayer==='g' && layers[resettingLayer].row == 1) keep.push("buyables")
        layerDataReset(this.layer, keep)
    },      
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if(hasUpgrade('p', 13)) mult=mult.dividedBy(upgradeEffect('p', 13))
        if(hasUpgrade('p', 21)) mult=mult.dividedBy(upgradeEffect('p', 21))
        if(hasUpgrade('p', 22)) mult=mult.dividedBy(upgradeEffect('p', 22))
        if(hasUpgrade('p', 23)) mult=mult.dividedBy(upgradeEffect('p', 23))
        if(hasUpgrade('g', 12)) mult=mult.dividedBy(buyableEffect('p', 11))
        if(hasUpgrade('g', 13)) mult=mult.dividedBy(upgradeEffect('g', 11))
        if(hasUpgrade('g', 21)) mult=mult.dividedBy(buyableEffect('p', 12))
        if(hasUpgrade('g', 23)) mult=mult.dividedBy(player.g.points.add(1))
        if(hasUpgrade('p', 41)) mult=mult.dividedBy(upgradeEffect('p', 41))
        if(hasUpgrade('g', 41)) mult=mult.pow(1.1)
        if(hasUpgrade('w', 31)) mult=mult.dividedBy(player.w.points.add(1))
        if(hasUpgrade('w', 63)) mult=mult.dividedBy(player.w.large.add(1).pow(0.5))
        mult = mult.dividedBy(smartUpgradeEffect('t', 71))
        mult = mult.dividedBy(smartUpgradeEffect('w', 101))
        mult = mult.div(smartUpgradeEffect('n', 11))
        mult = mult.div(smartUpgradeEffect('n', 72))
        mult = mult.mul(smartUpgradeEffect('n', 62))
        if(hasAchievement('re', 15)) mult = mult.times(tmp.r.requires.div(10))
        if(!hasUpgrade('t', 14)) mult=mult.times(tmp.t.effect)
        if(inChallenge('z', 12)) mult=mult.times((getBuyableAmount('p', 11).add(1)))
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        let exp = new Decimal(1)
        return exp
    },
    directMult() {
        let mult = new Decimal(1)
        if(inChallenge('n', 11)) mult = mult.mul(0.5)
        if(inChallenge('n', 14) && player.n.plantBug) mult = mult.mul(0.01)
        mult = mult.mul(tmp.m.effect.main)
        return mult
    },
    row: 0, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        {key: "p", description: "P: Reset for Plants", onPress(){if (canReset(this.layer)) doReset(this.layer)}},
    ],
    layerShown(){return true},
    automate() {
        if(hasUpgrade('w', 42)) buyMaxBuyable('p', 12)
        if(hasMilestone('z', 7)) buyBuyable('p', 13)
        if(player.p.points.lt(0)) player.p.points = new Decimal(0)
    },
    milestones: {
        0: {
            requirementDescription: "1 Plant",
            effectDescription() {return "Multiply Point gain by plants. Currently: x"+format(player.p.points.add(1))},
            done() {return player.p.best.gte(1)},
        },
    },
    upgrades: {
        11: {
            title: "Sedum",
            description: "Square milestone effect",
            cost: (new Decimal(3)),
            effect() {return player.p.points.add(1)},
            effectDisplay() {return "^2"},
        },
        12: {
            title: "Bear-Paw Succulent",
            description: "Multiply point gain based on points",
            cost: (new Decimal(5)),
            effect() {return player.points.max(0).add(2).log(2)},
            effectDisplay() {return "x"+format(upgradeEffect('p', 12))},
            tooltip: "log2(Points + 2)"
        },
        13: {
            title: "Jade Plant",
            description: "Plant costs are divided by plants",
            cost: (new Decimal(12)),
            effect() {return player.p.points.add(1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 13))},
        },
        14: {
            title: "Snake Plant",
            description: "Points are multiplied based on magnitude",
            cost: (new Decimal(18)),
            effect() {return new Decimal(2).pow(/*player.points.max(0).add(1).log(new Decimal(10).add(upgradeEffect('p', 34))).floor()*/pointMag())},
            effectDisplay() {return "x"+format(upgradeEffect('p', 14))},
            tooltip: "2 ^ Floor(log10(Points))",
        },
        21: {
            title: "Philodendron",
            description: "Plant costs are divided by points",
            cost: (new Decimal(25)),
            effect() {return player.points.max(0).add(1).pow(0.1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 21))},
            tooltip: "Points ^ 0.1",
        },
        22: {
            title: "Anthurium",
            description: "Plant costs are divided based on magnitude",
            cost: (new Decimal(30)),
            effect() {return new Decimal(2).pow(/*player.points.max(0).add(1).log(new Decimal(10).add(upgradeEffect('p', 34))).floor()*/pointMag())},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 22))},
            tooltip: "2 ^ Floor(log10(Points))",
        },
        23: {
            title: "Yucca",
            description: "Plant costs divided by plants, only goes up at intervals of 10",
            cost: (new Decimal(40)),
            effect() {return player.p.points.dividedBy(10).floor().times(10).add(1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 23))},
            tooltip: "Floor(plants √∑ 10) x 10",
        },
        24: {
            title: "Coconut Palm",
            description: "Unlock Gardens and double point gain",
            cost: (new Decimal(50)),
            effect() {return hasAchievement('re', 16) ? player.z.points.add(1).root(2).pow_base(2) : 2},
            effectDisplay() {return "x"+formatWhole(thisUpgradeEffect(this))},
        },
        31: {
            title: "Mint",
            description: "Plants multiply point gain slightly",
            cost: (new Decimal(155)),
            unlocked() {return hasMilestone('g', 0)},
            effect() {return player.p.points.add(1).pow(0.5)},
            effectDisplay() {return "x"+format(upgradeEffect('p', 31))},
            tooltip: "Plants ^ 0.5",
        },
        32: {
            title: "Chives",
            description: "Garden upgrade 1-4's effect is better",
            cost: (new Decimal(180)),
            unlocked() {return hasMilestone('g', 0)},
            tooltip: "log10 -> log5",
        },
        33: {
            title: "Rosemary",
            description: "Divide Garden costs based on points",
            cost: (new Decimal(195)),
            unlocked() {return hasMilestone('g', 0)},
            effect() {return player.points.max(0).add(10).log(10).pow(0.1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 33))},
            tooltip: "(log10(Points)) ^ 0.1",
        },
        34: {
            title: "Parsley",
            description: "Previous Plant upgrades based on magnitude are better",
            cost: (new Decimal(200)),
            unlocked() {return hasMilestone('g', 0)},
            effect() {if(hasUpgrade('p', 34)){return -5}else{return 0}},
            tooltip: "log10 -> log5",
        },
        41: {
            title: "Date Palm",
            description: "Divide Plant costs based on Points and Plants",
            cost: (new Decimal(250)),
            unlocked() {return new Decimal(challengeCompletions('z', 11)).gte(1)},
            effect() {return player.points.max(0).times(player.p.points.max(0).pow(3)).add(1).pow(0.2)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 41))},
            tooltip: "Points x (Plants ^ 3) ^ 0.2",
        },
        42: {
            title: "Acai Palm",
            description: "Multiply Point gain based on Tropical Zone completions and Zones",
            cost: (new Decimal(300)),
            unlocked() {return new Decimal(challengeCompletions('z', 11)).gte(2)},
            effect() {return player.z.points.add(1).times(new Decimal(challengeCompletions('z', 11)).add(1)).pow(2)},
            effectDisplay() {return "x"+format(upgradeEffect('p', 42))},
            tooltip: "((Completions + 1) x (Zones + 1)) ^ 2",
        },
        43: {
            title: "Sago Palm",
            description: "Reduce the Plant Cost base by 0.1",
            cost: (new Decimal(340)),
            unlocked() {return new Decimal(challengeCompletions('z', 11)).gte(3)},
            tooltip: "Plant cost formula: Base (2->1.9) ^ Plants ^ Exponent (1)"
        },
        44: {
            title: "Areca Palm",
            description: "Divide \"Prickly Pear\" cost based on Plants and divide \"Saguaro\" costs by it's amount",
            cost: (new Decimal(380)),
            unlocked() {return new Decimal(challengeCompletions('z', 11)).gte(3)},
            effect() {return player.p.points.add(1).pow(0.8)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 44))},
            tooltip: "Plants ^ 0.8",
        },
        51: {
            title: "Stonecrop",
            description: "Multiply Point gain based on Plants",
            cost() {if(hasUpgrade('p', 52)){return 600}else{return 500}},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(1)},
            effect() {return new Decimal(2).pow(player.p.points.pow(0.5))},
            effectDisplay() {return "x"+format(upgradeEffect('p', 51))},
            tooltip: "Cost increases when Plant Upgrade 5-2 is bought. Formula: 2 ^ (Plants ^ 0.5)",
        },
        52: {
            title: "Sempervivum",
            description: "Prickly Pear cost is divided based on points",
            cost() {if(hasUpgrade('p', 51)){return 600}else{return 500}},
            effect() {return player.points.max(0).add(2).log(2)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 52))},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(1)},
            tooltip: "Cost increases when Plant Upgrade 5-1 is bought. Formula: log2(Points)",
        },
        53: {
            title: "Campanula",
            description: "Saguaro multiplies Point gain by 2",
            cost() {if(hasUpgrade('p', 54)){return 885}else{return 750}},
            effect() {return new Decimal(2).pow(getBuyableAmount('p', 12))},
            effectDisplay() {return "x"+format(upgradeEffect('p', 53))},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(2)},
            tooltip: "Cost increases when Plant Upgrade 5-4 is bought",
        },
        54: {
            title: "Phlox",
            description: "Prickly Pear multiplies Point gain by 10 instead",
            cost() {if(hasUpgrade('p', 53)){return 910}else{return 750}},
            effect() {return new Decimal(2).pow(getBuyableAmount('p', 11))},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(2)},
            tooltip: "Cost increases when Plant Upgrade 5-3 is bought",
        },
        61: {
            title: "Dianthus",
            description: "Prickly Pear gives bonus levels to Saguaro",
            cost() {if(hasUpgrade('p', 62)){return 1325}else{return 1200}},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(3)},
            effectDisplay() {return "+"+format(getBuyableAmount('p', 11))},
            tooltip: "Cost increases when Plant Upgrade 6-2 is bought",
        },
        62: {
            title: "Pulsatilla Vulgaris",
            description: "Saguaro amount divides Prickly Pear cost",
            cost() {if(hasUpgrade('p', 61)){return 1330}else{return 1200}},
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(3)},
            effectDisplay() {return "√∑"+format(getBuyableAmount('p', 12).add(1))},
            tooltip: "Cost increases when Plant Upgrade 6-1 is bought",
        },
        63: {
            title: "Primrose",
            description: "Unlock a buyable",
            cost: (new Decimal(1500)),
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(3)},
        },
        64: {
            title: "Thrift",
            description: "Echinocactus is 'free' and gives bonus levels to Saguaro and Prickly Pear",
            cost: (new Decimal(1740)),
            unlocked() {return new Decimal(challengeCompletions('z', 12)).gte(3)},
            effectDisplay() {return "+"+format(getBuyableAmount('p', 13))},
        },
        71: {
            title: "Wild Garlic",
            description: "Divide Garden Costs based on Gardens",
            cost: (new Decimal(4350)),
            unlocked() {return new Decimal(challengeCompletions('z', 22)).gte(1)},
            effect() {return player.g.points.add(5).log(5).root(5)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 71))},
            tooltip: "5th Root(log5(Gardens))",
        },
        72: {
            title: "Tree Fern",
            description: "Reduce Echinocactus Scaling by 10",
            cost: (new Decimal(5170)),
            unlocked() {return new Decimal(challengeCompletions('z', 22)).gte(2)},
            effect() {if(hasUpgrade('p', 72)) {return -10} else {return 0}}, 
        },
        73: {
            title: "Bluebells",
            description: "Base Wildlife Gain uses a Better Formula",
            cost: (new Decimal(11360)),
            unlocked() {return new Decimal(challengeCompletions('z', 22)).gte(3)},
            tooltip: "2rt(Plants) -> 1.5rt(Plants)",
        },
        74: {
            title: "Filmy Fern",
            description: "'Nutrients' Divides Prickly Pear Cost at a Reduced Rate",
            cost: (new Decimal(13300)),
            unlocked() {return new Decimal(challengeCompletions('z', 22)).gte(3)},
            effect() {return buyableEffect('w', 11).pow(0.1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('p', 74))},
            tooltip: "Nutrients ^ 0.1",
        },
        81: {
            title: "Cabbage",
            description: "First Ecosystem Ability Effect also Divides Garden Costs at a Reduced Rate",
            cost: (new Decimal("1.65e6")),
            unlocked() {return hasMilestone('e', 6)},
            effect() {return player.e.points.add(1).pow(10).log(10).root(10)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "log10 (Effect) ^ 0.1",
        },
        82: {
            title: "Cauliflower",
            description: "Ability Cooldown Divided based on Zones",
            cost: (new Decimal("1.9e6")),
            unlocked() {return hasMilestone('e', 6)},
            effect() {return player.z.points.add(1).root(3)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "3rt (Zones)",
        },
    },
    buyables: {
        11: {
            title: "Prickly Pear",
            cost(x) {
              let base = new Decimal(2);
              if (hasMilestone('g', 1)) base = base.minus(0.1);
              if (hasUpgrade('g', 42)) base = base.minus(0.1);
              let cost = base.pow(x).times(10);
              if (hasUpgrade('g', 14)) cost = cost.dividedBy(upgradeEffect('g', 14));
              if (hasUpgrade('p', 44)) cost = cost.dividedBy(upgradeEffect('p', 44));
              if (hasUpgrade('p', 52)) cost = cost.dividedBy(upgradeEffect('p', 52));
              if (hasUpgrade('p', 62)) cost = cost.dividedBy(getBuyableAmount('p', 12).add(1));
              if (hasUpgrade('p', 74)) cost = cost.dividedBy(upgradeEffect('p', 74));
              return cost;
            },
            display() { return autoThisBuyableDisplay("Multiply point gain and divide plant costs by 5. Hold to buy max.", this)},
            canAfford() {return player.p.points.gte(this.cost()) && player.p.resetTime > 0 && msReady && player.p.points.gt(0)},
            buy() {
                if(hasUpgrade('r', 33)) {buyMaxBuyable(this.layer, this.id)} else{
              if(!hasAchievement('a', 24)) {player.p.points = player.p.points.minus(this.cost())};
              addBuyables(this.layer, this.id, 1)}
              if(isNaN(getBuyableAmount('p', 11))) setBuyableAmount('p', 11, new Decimal(0))
            },
            unlocked() { return hasUpgrade('g', 12) },
            effect() {
                let extra = new Decimal(0)
                if(hasUpgrade('p', 64)) extra = extra.add(getBuyableAmount('p', 13))
                return getBuyableAmount('p', 11).add(extra).pow_base(5) },
            tooltip() {return "Total Effect: <br> √ó/√∑"+format(getBuyableAmount('p', 11).pow_base(5))+" (Before Bonus Levels)"},
            buyMax() {
                let base = new Decimal(2);
                if (hasMilestone('g', 1)) base = base.minus(0.1);
                if (hasUpgrade('g', 42)) base = base.minus(0.1);
                let mult = new Decimal(1)
                if (hasUpgrade('g', 14)) mult = mult.dividedBy(upgradeEffect('g', 14));
                if (hasUpgrade('p', 44)) mult = mult.dividedBy(upgradeEffect('p', 44));
                if (hasUpgrade('p', 52)) mult = mult.dividedBy(upgradeEffect('p', 52));
                if (hasUpgrade('p', 62)) mult = mult.dividedBy(getBuyableAmount('p', 12).add(1));
                if (hasUpgrade('p', 74)) mult = mult.dividedBy(upgradeEffect('p', 74));
                let max = player.p.points.div(mult).add(1).log(base)
                max = max.min(this.purchaseLimit)
                if(max.gt(getBuyableAmount('p', 11))) setBuyableAmount('p', 11, max.add(1).floor())
            },
            purchaseLimit: new Decimal("1e9"),
        },
        12: {
            title: "Saguaro",
            cost(x) {let cost = new Decimal(1000).pow(x)
                if(hasUpgrade('p', 44)) cost=cost.dividedBy(getBuyableAmount('p', 12).add(1))
                if(hasUpgrade('w', 42)) cost=cost.dividedBy(upgradeEffect('w', 42))
                if(hasUpgrade('w', 51)) cost=cost.dividedBy(buyableEffect('w', 11))
            return cost},
            display() { return autoThisBuyableDisplay("Divide plant costs by 10. Hold to buy max.", this)},
            canAfford() { return player.points.gte(this.cost()) && player.points.gt(0)},
            buy() {
                player.points = player.points.sub(this.cost()).max(0)
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('g', 21) && !inChallenge('z', 22)},
            effect() {
                let extra = new Decimal(0)
                if(hasUpgrade('p', 61)) extra = extra.add(getBuyableAmount('p', 11))
                if(hasUpgrade('p', 64)) extra = extra.add(getBuyableAmount('p', 13))
                return new Decimal(10).pow(getBuyableAmount('p', 12).add(extra))},
            tooltip() {return "Total Effect: √∑"+format(getBuyableAmount('p', 12).pow_base(10))+" (Before Bonus Levels)"},
            buyMax() {
                let max = player.points.div(this.cost(0)).add(1).log(1000)
                max = max.min(this.purchaseLimit())
                if(max.gt(getBuyableAmount('p', 12))) setBuyableAmount('p', 12, max.add(1).floor())
            },
            purchaseLimit() {return hasMilestone('n', 4) ? new Decimal("1e308pt1") : new Decimal("1e9")},
            },
        13: {
            title: "Echinocactus",
            cost(x) {
                let cost = new Decimal(100).add(new Decimal(x).times(new Decimal(100).add(upgradeEffect('p', 72)))).pow(getBuyableAmount('p', 13).gte(100) ? getBuyableAmount('p', 13).minus(50).dividedBy(50) : 1)
                if(hasMilestone('z', 7)) cost = cost.pow(0.9)
                return cost
            },
            display() { return autoThisBuyableDisplay("Multiply Plant cost base above 1 by 0.99. Hold to buy max.", this,"","/"+format(tmp.p.buyables[13].purchaseLimit))},
            canAfford() { return player.p.points.gte(this.cost()) },
            buy() {
                if(!hasUpgrade('p', 64)) {player.p.points = player.p.points.sub(this.cost())}
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('p', 63)},
            purchaseLimit() {return hasMilestone('z', 6) ? 200 : 100},
            effect() {return new Decimal(0.99).pow(getBuyableAmount('p', 13))},
            tooltip() {return "Total Effect: √ó"+format(getBuyableAmount('p', 13).pow_base(0.99))+" (Before Bonus Levels)"},
            },
        },
}),
addLayer("g", { // Gardens layer
    name: "gardens", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üåª" : "G"},
    position: 1, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: false,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
    }},
    tree: "tree-tab",
    color: "#FF8800",
    requires: new Decimal(50), // Can be a function that takes requirement increases into account
    resource: "gardens", // Name of prestige currency
    baseResource: "plants", // Name of resource prestige is based on
    baseAmount() {
        let amt = player.p.points
        amt = amt.pow(smartUpgradeEffect('m', 32))
        if(inChallenge('n', 12)) amt = amt.div(amt.add(1).log(10).add(1))
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent() {return 0.4 + (inCompletion('re', 21, 1) ? 1 : 0)}, // Prestige currency exponent
    base() {return 2},
    canBuyMax: true,
    branches: ['p', 'z'],
    deactivated() {return inCompletion('re', 12, 1)},
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;
        
        let keep = [];
        if(hasAchievement('e', 21)) keep.push("upgrades", "milestones")
        layerDataReset(this.layer, keep);
    },
    resetsNothing() {return hasMilestone('z', 4) || hasMilestone('e', 5) || hasUpgrade('t', 13)},
    autoPrestige() {return hasUpgrade('t', 13)},
    autoUpgrade() {return hasMilestone('c', 2)},
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if(hasUpgrade('g', 22)) mult=mult.dividedBy(upgradeEffect('g', 22))
        if(hasUpgrade('p', 33)) mult=mult.dividedBy(upgradeEffect('p', 33))
        if(hasUpgrade('g', 34)) mult=mult.dividedBy(upgradeEffect('g', 34))
        if(hasUpgrade('p', 71)) mult=mult.dividedBy(upgradeEffect('p', 71))
        if(hasUpgrade('w', 53)) mult=mult.dividedBy(upgradeEffect('w', 53))
        if(hasMilestone('z', 4)) mult=mult.dividedBy(player.z.points.dividedBy(2).add(1).root(2))
        mult = mult.dividedBy(smartUpgradeEffect('t', 82))
        if(getClickableState('e', 11)) mult = mult.dividedBy(smartUpgradeEffect('p', 81))
        if(hasAchievement('re', 12)) mult = mult.dividedBy(player.re.points.add(1))
        mult = mult.dividedBy(smartUpgradeEffect('g', 51))
        mult = mult.dividedBy(smartUpgradeEffect('g', 52))
        mult = mult.div(buyableEffect('r', 43))
        mult = mult.div(smartUpgradeEffect('n', 22))
        mult = mult.div(smartUpgradeEffect('n', 62))
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    directMult() {
        let mult = new Decimal(1)
        if(hasUpgrade('m', 13)) mult = mult.mul(tmp.m.effect.main)
        return mult
    },
    row: 1, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        {layer: 'g', key: "g", description: "G: Reset for Gardens", onPress(){if (canReset(this.layer)) doReset(this.layer)}, unlocked() {return tmp[this.layer].layerShown}},
    ],
    layerShown(){return hasUpgrade('p', 24)||player.g.best.gte(1) || hasMilestone('e', 7)},

    upgrades: {
        11: {
            title: "Lawn",
            description: "Multiply point gain based on Gardens and Plants",
            cost: (new Decimal(1)),
            effect() {let effect = player.g.points.add(1).times(player.p.points.add(1))
                if(hasUpgrade('g', 31)) {effect=effect.times(player.z.points.add(1))}
            return effect},
            effectDisplay() {return "x"+format(upgradeEffect('g', 11))},
            tooltip: "(Gardens + 1) x (Plants + 1)",
        },
        12: {
            title: "Raised Beds",
            description: "Unlock a Plant buyable",
            cost: (new Decimal(1)),
            unlocked() {return hasUpgrade('g', 11)},
        },
        13: {
            title: "Terracotta Pots",
            description: "Garden upgrade 1-1 also divides plant costs",
            cost: (new Decimal(2)),
            unlocked() {return hasUpgrade('g', 12)},
        },
        14: {
            title: "Ceramic Pots",
            description: "Divide buyable cost based on magnitude of plants",
            cost: new Decimal(2),
            unlocked() { return hasUpgrade('g', 13) },
            effect() {
              let base = new Decimal(hasUpgrade('p', 32) ? 5 : 10);
              return player.p.points.plus(10).log(base).floor().pow_base(2);
            },
            effectDisplay() { return `√∑${format(upgradeEffect('g', 14))}` }
        },
        21: {
            title: "Raised Beds II",
            description: "Unlock another buyable",
            cost: (new Decimal(3)),
            unlocked() {return hasUpgrade('g', 14)},
        },
        22: {
            title: "Shed",
            description: "Divide Garden costs based on Magnitude of Plants",
            cost: (new Decimal(5)),
            unlocked() {return hasUpgrade('g', 21)},
            effect() {return new Decimal(1.1).pow(player.p.points.add(1).log(new Decimal(10).add(upgradeEffect('g', 32))).floor())},
            effectDisplay() {return "√∑"+format(upgradeEffect('g', 22))},
            tooltip: "1.1 ^ Floor(log10(Plants))",
        },
        23: {
            title: "Woodshed",
            description: "Divide plant costs by gardens",
            cost: (new Decimal(8)),
            unlocked() {return hasUpgrade('g', 22)},
            effectDisplay() {return "√∑"+format(player.g.points.add(1))},
            tooltip: "Gardens + 1",
        },
        24: {
            title: "Greenhouse",
            description: "Unlock Zones",
            cost: (new Decimal(18)),
            unlocked() {return hasUpgrade('g', 23)},
        },
        31: {
            title: "Decking I",
            description: "Garden Upgrade 1-1 Uses Zones as well",
            cost: (new Decimal(20)),
            unlocked() {return hasUpgrade('g', 24)},
        },
        32: {
            title: "Decking II",
            description: "Garden Upgrade 2-2 is better",
            cost: (new Decimal(21)),
            unlocked() {return hasUpgrade('g', 31)},
            effect() {if(hasUpgrade('g', 32)){return -5}else{return 0}},
            tooltip: "log10 -> log5",
        },
        33: {
            title: "Decking III",
            description: "Multiply point gain based on Gardens",
            cost: (new Decimal(23)),
            unlocked() {return hasUpgrade('g', 32)},
            effect() {return player.g.points.dividedBy(2).add(1)},
            effectDisplay() {return "x"+format(upgradeEffect('g', 33))},
            tooltip: "(Gardens √∑ 2) + 1",
        },
        34: {
            title: "Decking IV",
            description: "Divide Garden costs based on Points",
            cost: (new Decimal(30)),
            unlocked() {return hasUpgrade('g', 33)},
            effect() {return player.points.max(0).add(5).log(5).pow(0.05)},
            effectDisplay() {return "√∑"+format(upgradeEffect('g', 34))},
            tooltip: "log5(Points) ^ 0.05"
        },
        41: {
            title: "Half Whisky Barrel",
            description: "Raise Plant cost dividers to ^ 1.1",
            cost: (new Decimal(92)),
            unlocked() {return hasUpgrade('g', 34)},
        },
        42: {
            title: "Half Barrel Pond",
            description: "Reduce Prickly Pear base by 0.1",
            cost: (new Decimal(159)),
            unlocked() {return hasUpgrade('g', 41)},
        },
        43: {
            title: "Access to Pond for Wildlife",
            description: "Reduce Row 1 Garden Buyable Scaling by 3",
            cost: (new Decimal(189)),
            unlocked() {return hasUpgrade('g', 42)},
            effect() {if(hasUpgrade('g', 43)) {return hasUpgrade('w', 43) ? -5 : -3} else {return 0}}
        },
        44: {
            title: "Hot Tub",
            description: "Gardens Divide Zone Requirements",
            cost: (new Decimal(203)),
            unlocked() {return hasUpgrade('g', 43)},
            effect() {return player.g.points.add(1).pow(0.33)},
            effectDisplay() {return "√∑"+format(upgradeEffect('g', 44))},
            tooltip: "Gardens ^ 0.33",
        },
        51: {
            title: "Arch",
            description: "Every œÄ Seconds, Divide Garden Costs by 3, Changes Smoothly",
            cost: (new Decimal(9500)),
            unlocked() {return hasUpgrade('g', 44) && completionDecimal('re', 12).gte(1)},
            effect() {return new Decimal(new Decimal(player.timePlayed).sin()).add(2)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "sin (time played) + 2",
        },
        52: {
            title: "Pergola",
            description: "Every 2œÄ Seconds, Divide Garden Costs by 3, Changes Smoothly",
            cost: (new Decimal(11111)),
            unlocked() {return hasUpgrade('g', 51) && completionDecimal('re', 12).gte(2)},
            effect() {return new Decimal(new Decimal(player.timePlayed / 2).sin()).add(2)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "sin (floor (time played / 2)) + 2",
        },
        53: {
            title: "Outhouse",
            description: "Every 3œÄ Seconds, Multiply Leaf Gain by 9, Changes Smoothly",
            cost: (new Decimal(12500)),
            unlocked() {return hasUpgrade('g', 52) && completionDecimal('re', 12).gte(3)},
            effect() {return new Decimal(new Decimal(player.timePlayed / 3).sin()).add(2).pow(2)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "(sin (floor (time played / 2)) + 2) ^ 2",
        },
        54: {
            title: "Tipi",
            description: "Start Natural Disasters...",
            cost: (new Decimal(28000)),
            unlocked() {return hasUpgrade('g', 52) && completionDecimal('re', 12).gte(3)},
        },
    },
    milestones: {
        0: {
            requirementDescription: "7 Gardens",
            effectDescription: "Plants don't reset anything, automatically reset for plants and unlock a new row of Plant upgrades",
            done() {return player.g.points.gte(7) && hasAchievement('a', 21)},
            unlocked() {return hasAchievement('a', 21)},
        },
        1: {
            requirementDescription: "44 Gardens",
            effectDescription: "Reduce \"Prickly Pear\" base by 0.1",
            done() {return player.g.points.gte(44)},
            unlocked() {return hasMilestone('g', 0)},
        },
    },
    buyables: {
        11: {
            title: "Water Features",
            cost(x) {let cost = new Decimal(100).add(new Decimal(x).times(10 + upgradeEffect('g', 43)))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Point Gain by Temperate Zone Completions. (free) Hold to buy max.", this)},
            canAfford() { return player.g.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 24)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return new Decimal(challengeCompletions('z', 21)).gte(1)},
            effect() {return new Decimal(challengeCompletions('z', 21)).add(1).pow(getBuyableAmount('g', 11))},
            tooltip() {return "Temp. Zone Completions + 1 ^ X. Currently Multiplying Point Gain when bought by x"+format(new Decimal(1).add(challengeCompletions('z', 21)))},
            buyMax() {
                let max = new Decimal(0)
                max = player.g.points.minus(100).dividedBy(10 + upgradeEffect('g', 43))
                if(max.gt(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max)
            },
        },
        12: {
            title: "Tunnel Features",
            cost(x) {let cost = new Decimal(100).add(new Decimal(x).times(10 + upgradeEffect('g', 43)))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Point Gain by Zones. (free) Hold to buy max.", this)},
            canAfford() { return player.g.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 24)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return new Decimal(challengeCompletions('z', 21)).gte(2)},
            effect() {return player.z.points.add(1).pow(getBuyableAmount('g', 12))},
            tooltip() {return "Zones + 1 ^ X. Currently Multiplying Point Gain when bought by x"+format(player.z.points.add(1))},
            buyMax() {
                let max = new Decimal(0)
                max = player.g.points.minus(100).dividedBy(10 + upgradeEffect('g', 43))
                if(max.gt(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max)
            },
        },
        13: {
            title: "Exploration Features",
            cost(x) {let cost = new Decimal(100).add(new Decimal(x).times(20 + upgradeEffect('g', 43)))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Point Gain based on total first row Garden Buyable Purchases. (free) Hold to buy max.", this)},
            canAfford() { return player.g.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 24)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return new Decimal(challengeCompletions('z', 21)).gte(3)},
            effect() {return getBuyableAmount('g', 11).add(getBuyableAmount('g', 12)).add(getBuyableAmount('g', 13)).root(2).pow(getBuyableAmount('g', 13))},
            tooltip() {return "(Total Purchases ^ 0.5) ^ X. Currently Multiplying Point Gain when bought by x"+format(getBuyableAmount('g', 11).add(getBuyableAmount('g', 12)).add(getBuyableAmount('g', 13)).root(2))},
            buyMax() {
                let max = new Decimal(0)
                max = player.g.points.minus(100).dividedBy(20 + upgradeEffect('g', 43))
                if(max.gt(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max)
            },
        },
        21: {
            title: "Educational Features",
            cost(x) {let cost = new Decimal(800).add(new Decimal(x).times(10))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Research Speed and Point gain by Research. (free) Hold to buy max.", this)},
            canAfford() { return player.g.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 24)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return player.g.best.gte(795)},
            effect() {return getBuyableAmount('g', 21).pow_base(player.r.points.add(1))},
            tooltip() {return "Currently Multiplying Research and Point Gain when bought by "+format(player.r.points.add(1))},
            buyMax() {
                let max = new Decimal(0)
                max = player.g.points.minus(800).dividedBy(10)
                if(max.gt(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max)
            },
        },
    },
}),
addLayer("z", { // Zones layer
    name: "zones", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üèûÔ∏è" : "Z"},
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: false,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
    }},
    tree: "tree-tab",
    color: "#00AAFF",
    requires() {
        let req = new Decimal(250)
        req = req.div(smartMilestoneEffect('m', 4))
        return req
    }, // Can be a function that takes requirement increases into account
    resource: "zones", // Name of prestige currency
    baseResource: "plants", // Name of resource prestige is based on
    baseAmount() {
        let amt = player.p.points
        if(inChallenge('n', 12)) amt = amt.div(amt.add(1).log(10).add(1))
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1.7, // Prestige currency exponent
    base() {
        let base = new Decimal(2)
        base = base.minus(1).times(buyableEffect('e', 11)).add(1)
        return base
    },
    canBuyMax: true,
    autoPrestige() {return hasMilestone('z', 9)},
    resetsNothing() {return hasMilestone('e', 3)},
    branches: ['p', 'g'],
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;
        
        let keep = [];
        if(hasAchievement('e', 13) || (hasMilestone('n', 0)&&row<=3)) keep.push("milestones");
        if(hasAchievement('e', 22) || hasUpgrade('n', 71)) keep.push("challenges");
        if(hasUpgrade('z', 14) && row <= 3) keep.push("upgrades");
        layerDataReset(this.layer, keep);
    },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if(hasUpgrade('g', 44)) mult=mult.dividedBy(upgradeEffect('g', 44))
        mult = mult.div(smartUpgradeEffect('w', 102))
        if(hasAchievement('re', 24)) mult = mult.div(player.re.points.add(1))
        mult = mult.div(smartUpgradeEffect('n', 72))
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    row: 1, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        {layer: 'z', key: "z", description: "Z: Reset for Zones", onPress(){if (canReset(this.layer)) doReset(this.layer)}, unlocked() {return tmp[this.layer].layerShown}},
    ],
    layerShown(){return hasUpgrade('g', 24)||player.z.best.gte(1) || hasMilestone('e', 7)},

    milestones: {
        0: {
            requirementDescription: "1 Zone",
            effectDescription: "Unlock 1: The Tropical Zone",
            done() {return player.z.points.gte(1)},
        },
        1: {
            requirementDescription: "2 Zones",
            effectDescription: "Unlock 2: The Alpine Zone",
            done() {return player.z.points.gte(2)},
        },
        2: {
            requirementDescription: "3 Zones",
            effectDescription: "Unlock 3: The Temperate Zone",
            done() {return player.z.points.gte(3)},
        },
        3: {
            requirementDescription: "4 Zones",
            effectDescription: "Unlock 4: The Forest Zone",
            done() {return player.z.points.gte(4)},
        },
        4: {
            requirementDescription: "5 Zones",
            effectDescription() {return "Gardens Reset Nothing and Divide Their Cost based on Zones | Currently: √∑"+format(player.z.points.dividedBy(2).add(1).root(2))},
            done() {return player.z.points.gte(5)},
            unlocked() {return hasMilestone('z', 3)},
        },
        5: {
            requirementDescription: "6 Zones",
            effectDescription: "Autobuy Tree of Life Buyables",
            done() {return player.z.points.gte(6)},
            unlocked() {return hasUpgrade('t', 21)},
        },
        6: {
            requirementDescription: "7 Zones",
            effectDescription: "Multiply Echinocactus Limit by 2 but Superscaling Starts",
            done() {return player.z.points.gte(7)},
            unlocked() {return hasMilestone('z', 5)},
        },
        7: {
            requirementDescription: "8 Zones",
            effectDescription: "Autobuy Echinocactus and Reduce its Cost",
            done() {return player.z.points.gte(8)},
            unlocked() {return hasMilestone('z', 6)},
        },
        8: {
            requirementDescription: "9 Zones",
            effectDescription: "Multiply Ecology Gain and 'Recycling' Cost by Zones",
            done() {return player.z.points.gte(9)},
            unlocked() {return hasMilestone('z', 7)},
            effect() {return player.z.points.add(1)},
        },
        9: {
            requirementDescription: "10 Zones",
            effectDescription: "Automatically Reset for Zones",
            done() {return player.z.points.gte(10)},
            unlocked() {return hasMilestone('z', 8)},
        },
        10: {
            requirementDescription: "20 Zones",
            effectDescription: "Generate 1% of Pending Fish Gain Every Second",
            done() {return player.z.points.gte(20)},
            unlocked() {return hasMilestone('z', 9)},
        },
        11: {
            requirementDescription: "25 Zones",
            effectDescription: "Unlock 4 Zone Upgrades Which Reset Plants on Purchase",
            done() {return player.z.points.gte(25)},
            unlocked() {return hasMilestone('z', 10)},
        },
    },
    challenges: {
        11: {
            name: "The Tropical Zone",
            challengeDescription: "Divide point gain by Plants",
            goalDescription() {return format(new Decimal(60).times(challengeCompletions('z', 11)).add(150))+" Plants. ("+format(challengeCompletions('z', 11))+"/3.00)"},
            rewardDescription: "Unlock new Content",
            completionLimit: 3,
            unlocked() {return hasMilestone('z', 0)},
            canComplete() {return player.p.points.gte(new Decimal(60).times(challengeCompletions('z', 11)).add(150))},
        },
        12: {
            name: "The Alpine Zone",
            challengeDescription: "Previous Challenge Effects and Gain is divided by and plant costs are multiplied by Prickly Pear purchases",
            goalDescription() {return format(new Decimal(100).times(challengeCompletions('z', 12)).add(185))+" Plants. ("+format(challengeCompletions('z', 12))+"/3.00)"},
            rewardDescription: "Unlock new Content",
            completionLimit: 3,
            unlocked() {return hasMilestone('z', 1)},
            canComplete() {return player.p.points.gte(new Decimal(100).times(challengeCompletions('z', 12)).add(185))},
            countsAs: [11],
        },
        21: {
            name: "The Temperate Zone",
            challengeDescription: "Previous Challenge Effects and Point Gain is divided by log10 Points",
            goalDescription() {return format(new Decimal(400).pow(new Decimal(challengeCompletions('z', 21)).root(5)).times(challengeCompletions('z', 21)).add(325))+" Plants. ("+format(challengeCompletions('z', 21))+"/3.00)"},
            rewardDescription: "Unlock new Content",
            completionLimit: 3,
            unlocked() {return hasMilestone('z', 2)},
            canComplete() {return player.p.points.gte(new Decimal(400).pow(new Decimal(challengeCompletions('z', 21)).root(5)).times(challengeCompletions('z', 21)).add(325))},
            countsAs: [11, 12],
        },
        22: {
            name: "The Forest Zone",
            challengeDescription: "Previous Challenge Effects and Saguaro is Unavailable",
            goalDescription() {return format(new Decimal(280).pow(new Decimal(challengeCompletions('z', 22)).root(5)).times(challengeCompletions('z', 22)).add(1100))+" Plants. ("+format(challengeCompletions('z', 22))+"/3.00)"},
            rewardDescription: "Unlock new Content",
            completionLimit: 3,
            unlocked() {return hasMilestone('z', 3)},
            canComplete() {return player.p.points.gte(new Decimal(280).pow(new Decimal(challengeCompletions('z', 22)).root(5)).times(challengeCompletions('z', 22)).add(1100))},
            countsAs: [11, 12, 21],
        },
    },
    upgrades: {
        11: {
            title: "European Inspired Zone",
            description: "Multiply Ecology Gain by Zones",
            cost: (new Decimal(26)),
            unlocked() {return hasMilestone('z', 11)},
            onPurchase() {player.p.points = new Decimal(0)},
            effect() {return player.z.points.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
        },
        12: {
            title: "African Inspired Zone",
            description: "Raise Research Time to a Power Based on Zones",
            cost: (new Decimal(27)),
            unlocked() {return hasMilestone('z', 11)},
            onPurchase() {player.p.points = new Decimal(0)},
            effect() {return player.z.points.add(30).log(30)},
            effectDisplay() {return "^"+format(thisUpgradeEffect(this))},
            tooltip: "log30 (Zones)",
        },
        13: {
            title: "Asian Inspired Zone",
            description: "Reduce the Plant Exponent by 0.01",
            cost: (new Decimal(28)),
            unlocked() {return hasMilestone('z', 11)},
            onPurchase() {player.p.points = new Decimal(0)},
            effect() {return 0.01},
        },
        14: {
            title: "Americas Inspired Zone",
            description: "Unlock Reclaimed Ecosystems",
            cost: (new Decimal(50)),
            unlocked() {return hasMilestone('z', 11)},
            onPurchase() {player.p.points = new Decimal(0)},
            tooltip: "Keep Zone Upgrades on Reset",
        },
    },
}),
addLayer("w", { // Wildlife layer
    name: "wildlife", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "ü¶î" : "W"},
    position: 2, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: new Decimal(0),
        large: new Decimal(0),
        fish: new Decimal(0),
        canBuy114: false
    }},
    tree: "tree-tab",
    color: "#0088AA",
    resource: "wildlife", // Name of prestige currency
    baseResource: "plants", // Name of resource prestige is based on
    baseAmount() {return player.p.points}, // Get the current amount of baseResource
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    branches: ['p', 'g', 'z'],
    autoUpgrade() {return (hasMilestone('re', 0) || hasMilestone('c', 4)) && player.w.autoUpgrade},
    tooltip() {
        let tooltip = formatWhole(player.w.points)+" Wildlife"
        if(hasUpgrade('e', 14)) tooltip = tooltip + "<br><font size = -1>"+formatWhole(player.w.fish)+" Fish</font>"
        return tooltip
    },
    tabFormat: {
        "Main": {
            content: [
                "main-display",
                "resource-display",
                "blank",
                ["buyables", [1]],
                "blank",
                "blank",
                ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8]],
                "blank",
            ],
        },
        "Fish": {
            content: [
                "main-display",
                ["buyables", [2]],
                ["display-text",
                 function() {return "<font size = +2>You Have "+format(player.w.fish)+" Fish.</font>"},
                ],
                "resource-display",
                "blank",
                "blank",
                ["upgrades", [9, 10, 11]],
                "blank",
            ],
            unlocked() {return hasUpgrade('e', 14)},
        },
    },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;
        if(hasUpgrade('c', 24) && row <= 3) return;
        
        let keep = [];
        if (layers[resettingLayer].row == 1) {keep.push("upgrades")};
        if (resettingLayer==='e' && hasAchievement('e', 12)) keep.push("upgrades")
        let keep114 = false
        if(hasUpgrade('w', 114)) keep114 = true
        layerDataReset(this.layer, keep);
        if(keep114) player.w.canBuy114 = true
    },      
    effectDescription() {let desc = "You are generating "+format(tmp.w.wildlifeGen)+" Wildlife every second. You keep Wildlife Upgrades on reset. "
        if(hasUpgrade('w', 33)) desc = desc + "You have "+format(player.w.large)+" Larger Wildlife which is Multiplying Point gain by x"+format(player.w.large.add(1).pow(0.5))+" and Wildlife gain by x"+format(player.w.large.add(1).pow(hasUpgrade('w', 54) ? 0.5 : 0.1))+". "
        return desc
    },
    update(diff) {
        gain = tmp.w.wildlifeGen
        if(hasUpgrade('w', 33)) {
            player.w.large=getLogisticAmount(player.w.large, player.w.points.pow(0.1).times(upgradeEffect('w', 14)).times(buyableEffect('r', 42)), 0.1, diff)
        }
        player.w.points=getLogisticAmount(player.w.points, gain, upgradeEffect('w', 22).times(hasUpgrade('w', 61) ? 0.02 : 0.095), new Decimal(diff).times(tmp.w.wildlifeSpeed)).max(0)
        if(inChallenge('n', 14) && player.n.wildlifeBug) player.w.points = player.w.points.min(gain)
        
        let passiveFish = new Decimal(0)
        if(hasMilestone('z', 10)) passiveFish = passiveFish.add(0.01)
        passiveFish = passiveFish.add(smartUpgradeEffect('w', 94, new Decimal(0)).times(0.01))
        if(buyableEffect('w', 21).gte(player.w.fish)) player.w.fish = player.w.fish.add(diff>toNumber(new Decimal(1).div(passiveFish)) ? buyableEffect('w', 21).minus(player.w.fish) : buyableEffect('w', 21).minus(player.w.fish).times(diff).times(passiveFish))
    },
    wildlifeGen() {
        let gain = new Decimal(0)
        let rt = hasUpgrade('p', 73) ? (hasUpgrade('r', 11) ? 1.1 : 1.5 ) : 2 
        if(hasUpgrade('n', 73)) rt -= 0.1
        if(challengeCompletions('z', 22) >= 3 || hasMilestone('e', 7)) gain = gain.add(player.p.points.root(rt))
        if(hasUpgrade('w', 21)) gain = gain.add(player.g.points.root(2))
        
        if(hasUpgrade('w', 12)) gain = gain.times(upgradeEffect('w', 12))
        if(hasUpgrade('w', 32)) gain = gain.times(upgradeEffect('w', 32))
        if(hasUpgrade('w', 41)) gain = gain.times(upgradeEffect('w', 41))
        if(hasUpgrade('w', 13)) gain = gain.times(upgradeEffect('w', 13))
        if(hasUpgrade('w', 33)) gain = gain.times(player.w.large.add(1).pow(hasUpgrade('w', 54) ? 0.5 : 0.1))
        if(hasUpgrade('w', 23)) gain = gain.times(upgradeEffect('w', 23))
        if(hasUpgrade('w', 52)) gain = gain.times(upgradeEffect('w', 52))
        if(hasUpgrade('w', 34)) gain = gain.times(upgradeEffect('w', 34))
        if(hasUpgrade('w', 44)) gain = gain.times(upgradeEffect('w', 44))
        if(hasUpgrade('w', 62)) gain = gain.times(upgradeEffect('w', 62))
        gain = gain.times(buyableEffect('r', 12))
        gain = gain.times(gainUpgradeEffect('w', 73))
        gain = gain.times(gainUpgradeEffect('w', 82))
        gain = gain.times(smartUpgradeEffect('e', 12))
        gain = gain.times(smartUpgradeEffect('w', 93))
        gain = gain.times(smartUpgradeEffect('e', 22))
        gain = gain.times(smartUpgradeEffect('t', 121))
        gain = gain.mul(smartUpgradeEffect('c', 11))
        gain = gain.mul(smartUpgradeEffect('c', 22))
        if(hasAchievement('re', 11)) gain = gain.pow(1.1)
        gain = gain.pow(player.n.bees.add(1).mul(player.n.spiders.add(1)).mul(player.n.butterflies.add(1)).max(1).log(10).add(1))
        
        if(inChallenge('re', 11)) gain = gain.pow(0.01)
        if(inChallenge('re', 11) && challengeCompletions('re', 11) >= 2) gain = gain.pow(10)
        if(inChallenge('n', 14) && player.n.wildlifeBug) gain = gain.max(1).log(10)

        gain=gain.min(gain.div("ee11").root(player.w.points.add(gain).max(0).add(1).log(10).add(1).log(10).div(11).add(1)).mul("ee11"))
        gain=gain.min(gain.div("ee16").root(player.w.points.add(gain).max(0).add(1).log(10).add(1).log(10).div(16).add(1)).mul("ee16"))
        return gain
    },
    wildlifeSpeed() {
        let speed = new Decimal(1)
        if(hasUpgrade('w', 24)) speed = speed.times(5)
        if(hasUpgrade('w', 24)) speed = speed.times(2)
        return speed
    },
    row: 0, // Row the layer is in on the tree (0 is the first row)
    layerShown(){return challengeCompletions('z', 22) >= 3 || hasMilestone('e', 7) || hasUpgrade('c', 24)},
    
    upgrades: {
        11: {
            title: "Log Pile",
            description: "Multiply Point gain based on Wildlife",
            cost: (new Decimal(1000)),
            effect() {return player.w.points.add(1).pow(0.3)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 11))},
            tooltip: "Wildlife ^ 0.3",
        },
        12: {
            title: "Pond",
            description: "Wildlife multiplies its own gain",
            cost: (new Decimal(1000)),
            unlocked() {return hasUpgrade('w', 11)},
            effect() {return player.w.points.add(10).log(10)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 12))},
            tooltip: "log10(Wildlife)",
        },
        13: {
            title: "Cave",
            description: "Multiply Wildlife Gain based on Magnitude",
            cost: (new Decimal("1.7e6")),
            unlocked() {return hasUpgrade('w', 12)},
            effect() {return player.points.max(0).add(10).log(10).floor().pow(0.5)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 13))},
            tooltip: "Magnitude ^ 0.5",
        },
        14: {
            title: "Meadow",
            description: "You gain twice as much Larger Wildlife",
            cost() {return hasUpgrade('w', 24) ? new Decimal("6.75e15") : new Decimal("5.55e11")},
            unlocked() {return hasUpgrade('w', 13)},
            effect() {return hasUpgrade('w', 14) ? 2 : 1},
            tooltip: "Cost Increases when Stronger Wildlife is Bought",
        },
        21: {
            title: "Bigger Wildlife",
            description: "Wildlife gain increased based on Gardens",
            cost: (new Decimal(3500)),
            effectDisplay() {return "+"+format(player.g.points.add(1).pow(0.5))},
            tooltip: "sqrt(Gardens)",
        },
        22: {
            title: "Longer Wildlife",
            description: "You lose half as much of your Wildlife every second",
            cost: (new Decimal(11000)),
            unlocked() {return hasUpgrade('w', 21)},
            effect() {if(hasUpgrade('w', 22)) {return new Decimal(0.5)} else {return new Decimal(1)}},
            tooltip: "10% -> 5%",
        },
        23: {
            title: "Faster Wildlife",
            description: "Multiply Wildlife gain by 'Exploration Features' Amount",
            cost: (new Decimal("6e8")),
            unlocked() {return hasUpgrade('w', 22)},
            effect() {return getBuyableAmount('g', 13).add(1)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 23))},
        },
        24: {
            title: "Stronger Wildlife",
            description: "Wildlife Time is 5x as Fast",
            cost() {return new Decimal(hasUpgrade('w', 14) ? "7.5e15" : "5.55e11")},
            unlocked() {return hasUpgrade('w', 23)},
            tooltip: "Wildlife gain x5 <u> after wildlife loss</u>. Cost increases when 'Meadow' is Bought",
        },
        31: {
            title: "Anteater",
            description: "Plant costs are Divided by Wildlife",
            cost: (new Decimal(4400)),
            unlocked() {return hasUpgrade('w', 11) && hasUpgrade('w', 21)},
            effectDisplay() {return "√∑"+format(player.w.points.add(1))},
            tooltip: "Requires 'Log Pile' and 'Bigger Wildlife'",
        },
        32: {
            title: "Hedgehog",
            description: "Multiply Wildlife gain based on Zones",
            cost: (new Decimal(4500)),
            unlocked() {return hasUpgrade('w', 12) && hasUpgrade('w', 21)},
            effect() {return player.z.points.add(1).root(2)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 32))},
            tooltip: "sqrt(Zones). Requires 'Pond' and 'Bigger Wildlife'",
        },
        33: {
            title: "Bear",
            description: "Replace ^ 0.1 of Wildlife with Larger Wildlife every second which helps Multiply Point gain and Wildlife Gain",
            cost: (new Decimal("2.75e8")),
            unlocked() {return hasUpgrade('w', 13) && hasUpgrade('w', 21)},
            tooltip: "Point gain mult: LW ^ 0.5. Wildlife gain mult: LW ^ 0.1. Requires 'Cave' and 'Bigger Wildlife'",
        },
        34: {
            title: "Roe Deer",
            description: "Multiply Wildlife gain Based on Points",
            cost() {return new Decimal("6.5e11")},
            unlocked() {return hasUpgrade('w', 14) && hasUpgrade('w', 21)},
            effect() {return player.points.max(0).add(3).log(3).root(3)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 34))},
            tooltip: "3rt (log3 (Points)). Requires 'Meadow' and 'Bigger Wildlife'",
        },
        41: {
            title: "Woodlice",
            description: "Multiply Point and Wildlife Gain based on Points and Wildlife",
            cost: (new Decimal(23000)),
            unlocked() {return hasUpgrade('w', 11) && hasUpgrade('w', 22)},
            effect() {return player.points.max(0).add(2).pow(0.05).log(20).max(1).times(player.w.points.add(2).pow(0.25).log(4).max(1))},
            effectDisplay() {return "x"+format(upgradeEffect('w', 41))},
            tooltip: "log20 (Points ^ 0.05) x lo4(Wildlife ^ 0.25). Requires 'Log Pile' and 'Longer Wildlife'",
        },
        42: {
            title: "Dragonfly",
            description: "Autobuy Saguaro and Divide its cost by Wildlife x Plants x its Amount",
            cost: (new Decimal("1.5e6")),
            unlocked() {return hasUpgrade('w', 12) && hasUpgrade('w', 22)},
            effect() {return player.w.points.add(1).times(player.p.points.add(1)).times(getBuyableAmount('p', 12).add(1))},
            effectDisplay() {return "x"+format(upgradeEffect('w', 42))},
            tooltip: "Requires 'Pond' and 'Longer Wildlife'",
        },
        43: {
            title: "Olm",
            description: "Reduce Garden Buyable Cost scaling by 2",
            cost: (new Decimal("4e8")),
            unlocked() {return hasUpgrade('w', 13) && hasUpgrade('w', 22)},
        },
        44: {
            title: "Field Mouse",
            description: "'Nutrients' affects Wildlife Gain at a Reduced Rate",
            cost() {return new Decimal("1.11e13")},
            unlocked() {return hasUpgrade('w', 14) && hasUpgrade('w', 22)},
            effect() {return buyableEffect('w', 11).add(2).log(2).root(2)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 44))},
            tooltip: "sqrt (log2 (Effect)). Requires 'Meadow' and 'Longer Wildlife'",
        },
        51: {
            title: "Centipede",
            description: "Unlock a Larger Wildlife Buyable",
            cost: (new Decimal("1e10")),
            unlocked() {return hasUpgrade('w', 11) && hasUpgrade('w', 23)},
            tooltip: "Requires 'Log Pile' and 'Faster Wildlife'",
        },
        52: {
            title: "Pond Skater",
            description: "Plants Boost Wildlife Gain",
            cost: (new Decimal("1.55e10")),
            unlocked() {return hasUpgrade('w', 12) && hasUpgrade('w', 23)},
            effect() {return player.p.points.add(1).pow(0.3)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 52))},
            tooltip: "Plants ^ 0.3. Requires 'Pond' and 'Faster Wildlife'",
        },
        53: {
            title: "Rabbit",
            description: "Divide Garden Costs based on Wildlife (Boosted by Large Wildlife)",
            cost: (new Decimal("3.33e11")),
            unlocked() {return hasUpgrade('w', 13) && hasUpgrade('w', 23)},
            effect() {return player.w.points.times(player.w.large).add(10).log(10).pow(0.1)},
            effectDisplay() {return "√∑"+format(upgradeEffect('w', 53))},
            tooltip: "(log10 (Wildlife √ó LW)) ^ 0.1. Requires 'Cave' and 'Faster Wildlife' (R:ab:bit)",
        },
        54: {
            title: "Kestrel",
            description: "Larger Wildlife -> Wildlife effect is Better",
            cost() {return new Decimal("3.33e14")},
            unlocked() {return hasUpgrade('w', 14) && hasUpgrade('w', 23)},
            tooltip: "^ 0.1 -> ^ 0.5. Requires 'Meadow' and 'Faster Wildlife'",
        },
        61: {
            title: "Wood Ant",
            description: "Wildlife Time x2 and Lose 20% as much Wildlife",
            cost() {return new Decimal("6.246e11")},
            unlocked() {return hasUpgrade('w', 11) && hasUpgrade('w', 24)},
            tooltip: "Requires 'Log Pile' and 'Stronger Wildlife'",
        },
        62: {
            title: "Swan",
            description: "Saguaro Multiplies Wildlife Gain at a Reduced Rate",
            cost() {return new Decimal("3.5e12")},
            unlocked() {return hasUpgrade('w', 12) && hasUpgrade('w', 24)},
            effect() {return buyableEffect('p' ,12).pow(0.5).log(2)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 62))},
            tooltip: "log2 (Effect ^ 0.5). Requires 'Pond' and 'Stronger Wildlife'",
        },
        63: {
            title: "Alligator",
            description: "Larger Wildlife 'Point Mult' also Divides Plant Costs",
            cost() {return new Decimal("5.75e15")},
            unlocked() {return hasUpgrade('w', 13) && hasUpgrade('w', 24)},
            tooltip: "Requires 'Cave' and 'Stronger Wildlife'",
        },
        64: {
            title: "Fox",
            description: "Unlock Research",
            cost() {return new Decimal("4.44e20")},
            unlocked() {return hasUpgrade('w', 14) && hasUpgrade('w', 24)},
            tooltip: "Requires 'Meadow' and 'Stronger Wildlife'",
        },
        71: {
            title: "Fire Ant",
            description: "Wildlife Time Affects Research",
            cost: (new Decimal("2e21")),
            unlocked() {return hasUpgrade('w', 11) && getBuyableAmount('r', 12).gte(2)},
            tooltip: "Requires 'Log Pile' and 'Wildlife Booster' x2",
        },
        72: {
            title: "Raccoon",
            description: "Research Time Boosts itself",
            cost: (new Decimal("3e22")),
            unlocked() {return hasUpgrade('w', 12) && getBuyableAmount('r', 12).gte(2)},
            effect() {return tmp.r.baseAmount.add(1).pow(0.25)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 72))},
            tooltip: "Time ^ 0.25. Requires 'Pond' and 'Wildlife Booster' x2",
        },
        73: {
            title: "Bat",
            description: "Research Time Multiplies Wildlife Gain",
            cost: (new Decimal("7e22")),
            unlocked() {return hasUpgrade('w', 13) && getBuyableAmount('r', 12).gte(2)},
            effect() {return tmp.r.baseAmount.add(1).pow(0.2)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 73))},
            tooltip: "Time ^ 0.2. Requires 'Cave' and 'Wildlife Booster' x2",
        },
        74: {
            title: "Badger",
            description: "Larger Wildlife Effect also Multiplies Research Time Gain",
            cost: (new Decimal("1e24")),
            unlocked() {return hasUpgrade('w', 14) && getBuyableAmount('r', 12).gte(2)},
            effect() {return player.w.large.add(1).pow(0.5)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 74))},
            tooltip: "Requires 'Meadow' and 'Wildlife Booster' x2",
        },
        81: {
            title: "Spider",
            description: "Every Upgrade in this Row Doubles Research Speed",
            cost: (new Decimal("1e86")),
            unlocked() {return hasUpgrade('w', 11) && hasUpgrade('r', 24)},
            effect() {return new Decimal(hasUpgrade('w', 81) ? 2:1).times(hasUpgrade('w', 82) ? 2:1).times(hasUpgrade('w', 83) ? 2:1).times(hasUpgrade('w', 84) ? 2:1)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 81))},
            tooltip: "Requires 'Log Pile' and 'Smarter Wildlife'",
        },
        82: {
            title: "Newt",
            description: "Research Effect Multiplies Wildlife Gain at a Reduced Rate",
            cost: (new Decimal("2e87")),
            unlocked() {return hasUpgrade('w', 12) && hasUpgrade('r', 24)},
            effect() {return player.r.points.pow(10)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 82))},
            tooltip: "Effect ^ 0.1. Requires 'Pond' and 'Smarter Wildlife'",
        },
        83: {
            title: "Meerkat",
            description: "Increase Nutrients Limit by 5",
            cost: (new Decimal("1.5e119")),
            unlocked() {return hasUpgrade('w', 13) && hasUpgrade('r', 24)},
            effect() {return hasUpgrade('w', 83) ? 5 : 0},
            tooltip: "Requires 'Cave' and 'Smarter Wildlife'",
        },
        84: {
            title: "Owl",
            description: "Multiply Research Speed by Zones",
            cost: (new Decimal("5e133")),
            unlocked() {return hasUpgrade('w', 14) && hasUpgrade('r', 24)},
            effect() {return player.z.points.add(1)},
            effectDisplay() {return "x"+format(upgradeEffect('w', 84))},
            tooltip: "Requires 'Meadow' and 'Smarter Wildlife'",
        },
        91: {
            title: "Rudd",
            description: "Point Gain is Multiplied Based on Fish",
            cost: (new Decimal(1)),
            effect() {return player.w.fish.add(1).pow(1000)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Fish ^ 1000",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        92: {
            title: "Roach",
            description: "Multiply Research Time Based on Fish",
            cost: (new Decimal(50)),
            effect() {return player.w.fish.add(1).pow(100)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Fish ^ 100",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        93: {
            title: "Gudgeon",
            description: "Multiply Wildlife Gain Based on Fish",
            cost: (new Decimal(250)),
            effect() {return player.w.fish.add(1).pow(10)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Fish ^ 10",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        94: {
            title: "Stickleback",
            description: "Increase Passive Fish Generation (20 Zones) by 1% per Ecosystem",
            cost: (new Decimal(350)),
            effect() {return player.e.points},
            effectDisplay() {return "+"+format(thisUpgradeEffect(this))+"%"},
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        101: {
            title: "Bream",
            description: "Divide Plant Costs Based on Fish",
            cost: (new Decimal(1111)),
            unlocked() {return hasUpgrade('w', 91)},
            effect() {return player.w.fish.add(1).pow(2000)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "Fish ^ 2000",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        102: {
            title: "Rainbow Trout",
            description: "Divide Zone Requirements Based on Research Requirement Multiplier",
            cost: (new Decimal(1750)),
            unlocked() {return hasUpgrade('w', 92)},
            effect() {return new Decimal(1).div(tmp.r.requires).add(1).log(2).root(2)},
            effectDisplay() {return shiftDown ? "√∑"+thisUpgradeEffect(this) : "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "2rt (log2 (Mult))",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        103: {
            title: "Common Carp",
            description: "Fish Multiply Their own Gain",
            cost: (new Decimal(5555)),
            unlocked() {return hasUpgrade('w', 93)},
            effect() {return player.w.fish.add(10).log(10)},
            effectDisplay() {return shiftDown ? "x"+thisUpgradeEffect(this) : "x"+format(thisUpgradeEffect(this))},
            tooltip: "log10 (Fish)",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        104: {
            title: "Eel",
            description: "Double 'Recycling' Limit but Superscaling Starts",
            cost: (new Decimal(32000)),
            unlocked() {return hasUpgrade('w', 94)},
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        111: {
            title: "Pike",
            description: "Multiply Point Gain based on Plants",
            cost: (new Decimal(88000)),
            unlocked() {return completionDecimal('re', 11).gte(1)},
            effect() {return player.p.points.add(1).pow(500)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Plants ^ 500",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        112: {
            title: "Largemouth Bass",
            description: "Fish Nerf Plant Cost Exponent",
            cost: (new Decimal(95000)),
            unlocked() {return completionDecimal('re', 11).gte(2)},
            effect() {return new Decimal(1).div(player.w.fish.add(50).log(50).root(50))},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "50rt (log50 (Fish))",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        113: {
            title: "Tench",
            description: "Multiply Ecology Gain Based on Fish",
            cost: (new Decimal(106000)),
            unlocked() {return completionDecimal('re', 11).gte(3)},
            effect() {return player.w.fish.add(2).log(2).floor()},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "floor (log2 (Fish))",
            currencyDisplayName: "Fish",
            currencyInternalName: "fish",
            currencyLayer: "w",
        },
        114: {
            title: "Koi",
            description: "Multiply Leaf Gain by 100, Effect Decays over Ecosystem Reset",
            cost: (new Decimal(10)),
            unlocked() {return hasAchievement('re', 13)},
            effect() {return new Decimal(100).root(new Decimal(player.e.resetTime + 1).root(2))},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "(sqrt (Reset Time))rt (100)",
            currencyDisplayName: "Fish (Only Purchasable once Bought in 'Coral Reef')",
            currencyInternalName: "fish",
            currencyLayer: "w",
            onPurchase() {player.w.canBuy114 = true},
            canAfford() {return inChallenge('re', 11) || player.w.canBuy114},
        },
    },
    buyables: {
        11: {
            title: "Nutrients",
            cost(x) {let cost = new Decimal(10).times(x.dividedBy(2).add(1).pow(2))
            return cost},
            display() { return autoThisBuyableDisplay("Divide Saguaro cost based on points. Only Reduces Large Wildlife by 10% of Cost. Hold to buy max.", this, " Larger Wildlife", "/"+format(tmp.w.buyables[11].purchaseLimit))},
            canAfford() { return player.w.large.gte(this.cost()) },
            buy() {
                player.w.large = player.w.large.minus(this.cost().times(0.1))
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('w', 51)},
            purchaseLimit() {return (hasUpgrade('r', 14) ? (hasUpgrade('r', 15) ? 40 : 35 ) : 30) + upgradeEffect('w', 83) + smartUpgradeEffect('r', 31, 0)},
            effect() {return player.points.max(0).add(1).pow(getBuyableAmount('w', 11).dividedBy(100))},
            tooltip() {return "Points ^ N where N is X √∑ 100. Currently: √∑"+format(buyableEffect('w', 11))},
        },
        21: {
            title: "Find Fish",
            display() {return tmp.w.buyables[21].canAfford ? "Reset Ecology and Wildlife to Gain <br><font size = +2>"+format(thisBuyableEffect(this).minus(player.w.fish).max(0))+"</font><br> Fish" : "Next in "+format(player.w.fish.minus(thisBuyableEffect(this)))+" Fish<br>Fish Gain is Based on Wildlife and Ecology"},
            canAfford() {return thisBuyableEffect(this).gte(player.w.fish)},
            buy() {
                player.w.fish = thisBuyableEffect(this).max(player.w.fish)
                player.w.points = new Decimal(0)
                player.w.large = new Decimal(0)
                player.e.ecology = new Decimal(0)
            },
            effect() {
                let gain = player.w.points.add(1).log("1e100").add(player.w.points.dividedBy("1e1000").add(1).log("1e10")).times(player.e.ecology.add(1).log(10)).minus(100)
                if(hasAchievement('re', 13)) gain = gain.add(100)
                gain = gain.times(smartUpgradeEffect('r', 34))
                gain = gain.times(smartUpgradeEffect('w', 103))
                gain = gain.mul(smartMilestoneEffect('r', 2))
                gain = gain.mul(smartMilestoneEffect('m', 6))
                return gain
            },
        },
    },
}),
addLayer("r", { // Research layer
    name: "research", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üîé" : "R"},
    position: 1, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: new Decimal(0),
        researchers: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
        resetTime: 0,
    }},
    tree: "tree-tab",
    color: "#CCCCCC",
    requires() {
        let req = new Decimal(1)
        req = req.dividedBy(buyableEffect('r', 11))
        req = req.dividedBy(buyableEffect('r', 13))
        req = req.dividedBy(buyableEffect('r', 22))
        return req
    },
    resource: "Research", // Name of prestige currency
    baseResource: "Seconds", // Name of resource prestige is based on
    baseAmount() {
        let amt = new Decimal(player.r.resetTime)
        amt = amt.times(buyableEffect('r', 21))
        if(hasUpgrade('w', 71)) amt = amt.times(tmp.w.wildlifeSpeed)
        amt = amt.times(gainUpgradeEffect('w', 72))
        amt = amt.times(gainUpgradeEffect('w', 74))
        amt = amt.times(gainUpgradeEffect('r', 12))
        amt = amt.times(gainUpgradeEffect('r', 13))
        amt = amt.times(gainUpgradeEffect('r', 14))
        amt = amt.times(player.r.researchers.add(1))
        amt = amt.times(gainUpgradeEffect('r', 15))
        amt = amt.times(buyableEffect('g', 21))
        amt = amt.times(gainUpgradeEffect('w', 81))
        amt = amt.times(gainUpgradeEffect('w', 84))
        amt = amt.times(smartUpgradeEffect('t', 11))
        amt = amt.times(smartUpgradeEffect('t', 43))
        amt = amt.times(smartUpgradeEffect('t', 73))
        amt = amt.times(smartUpgradeEffect('t', 72))
        amt = amt.times(smartUpgradeEffect('w', 92))
        if(hasAchievement('a', 83)) amt = amt.times(2)
        amt = amt.times(smartMilestoneEffect('r', 0))
        if(hasUpgrade('t', 131)) amt = amt.mul(upgradeEffect('t', 131)[0])
        amt = amt.mul(smartUpgradeEffect('c', 12))
        amt = amt.pow(smartUpgradeEffect('e', 11))
        amt = amt.pow(smartUpgradeEffect('z', 12))
        if(inChallenge('re', 11) && challengeCompletions('re', 11) >= 1) amt = amt.pow(0.01)
        if(inChallenge('re', 11) && challengeCompletions('re', 11) >= 2) amt = amt.pow(10)
        if(inChallenge('n', 12)) amt = amt.div(amt.add(1).log(10).add(1))
        if(inChallenge('n', 14) && player.n.researchBug) amt = amt.max(1).log(10)
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent() {return 1.5-smartUpgradeEffect('e', 21, 0) + (inCompletion('re', 21, 0)?1:0)}, // Prestige currency exponent
    base() {return 2 - smartUpgradeEffect('t', 13, 0)},
    canBuyMax: true,
    effectDescription() {return "Multiplying Point gain by "+format(player.r.points.add(1).pow(hasUpgrade('r', 22) ? 100 : 3))},
    branches: [],
    deactivated() {return inCompletion('re', 12, 0)},
    update(diff) {
        if(!tmp.r.layerShown) player.r.resetTime = 0
        player.r.researchers = player.r.researchers.add(buyableEffect('r', 32).times(diff))
    },
    doReset(resettingLayer) {
        if(layers[resettingLayer].row <= 1 || resettingLayer === 'r') return;
        let row = layers[resettingLayer].row;

        let keptUpgrades = [];
        if(getClickableState('n', 11)) keptUpgrades.push(14)
        
        let keep = [];
        if(hasAchievement('e', 14)) keep.push("upgrades")
        if(hasUpgrade('c', 33) && row <= 3) keep.push("clickables", "milestones")
        layerDataReset(this.layer, keep)
        
        if(resettingLayer==='e' && hasAchievement('e', 11) && !player[this.layer].upgrades.includes(14)) player[this.layer].upgrades.push(14)
        player.r.upgrades = player.r.upgrades.concat(keptUpgrades)
    },
    automate() {
        if(hasUpgrade('r', 14)) buyBuyable('p', 11)
        if(hasUpgrade('r', 15)) buyBuyable('w', 11)
        if(hasAchievement('re', 21)) buyBuyable('r', 41)
        if(hasAchievement('re', 22)) buyBuyable('r', 42)
        if(hasAchievement('re', 23)) buyBuyable('r', 43)
    },
    
    tabFormat: {
        Main: {
            content: [
                "main-display",
                "prestige-button",
                ["display-text",
                    function() {return 'If you wrote 3 digits per second, it would take you approximately '+formatTime(tmp.r.baseAmount.log(10).floor().dividedBy(3))+' to write down your time spent researching.'}],
                "blank",
                "blank",
                ["display-text",
                    'Linear'],
                ["bar", "bar1"],
                "blank",
                ["display-text",
                    'Logarithmic'],
                ["bar", "bar2"],
                "blank",
                "blank",
                "buyables",
                "blank",
                "blank",
                ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]],
            ],
        },
        Minigame: {
            content: [
                "main-display",
                "prestige-button",
                ["display-text",
                    function() {return 'If you wrote 3 digits per second, it would take you approximately '+formatTime(tmp.r.baseAmount.log(10).floor().dividedBy(3))+' to write down your time spent researching.'}],
                "blank",
                ["display-text", function() {
                    return "<br>Your minigame score is: "+format(tmp.r.minigameScore)
                }],
                "blank",
                ["clickables", [1, 2, 3, 4, 5, 6]],
                "blank",
                ["milestones", [0, 1, 2, 3]],
                "blank",
            ],
            unlocked() {return hasMilestone('n', 1)},
        },
    },
    autoPrestige: true,
    resetsNothing() {return hasMilestone('t', 4) || player.e.best.gte(1)},
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
               return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    directMult() {
        let mult = new Decimal(1)
        if(hasUpgrade('m', 12)) mult = mult.mul(tmp.m.effect.main)
        return mult
    },
    row: "side", // Row the layer is in on the tree (0 is the first row)
    layerShown(){return hasUpgrade('w', 64)||player.r.best.gte(1)||player.e.best.gte(1)},   
    bars: {
        bar1: {
            direction: RIGHT,
            width: 600,
            height: 50,
            instant: true,
            progress() {return new Decimal(tmp.r.baseAmount).dividedBy(getNextAt(this.layer, true))},
        },
        bar2: {
            direction: RIGHT,
            width: 300,
            height: 25,
            instant: true,
            progress() {return new Decimal(tmp.r.baseAmount.dividedBy(tmp.r.getPrevAt)).log(2).dividedBy(getNextAt(this.layer, true).dividedBy(tmp.r.getPrevAt).log(2))},
        },
        
    },
    getPrevAt() {
        return (new Decimal(tmp.r.base).pow(player.r.points.minus(1).pow(tmp.r.exponent)).times(tmp.r.requires))
    },
    buyables: {
        11: {
            title: "Requirement Reduction",
            cost(x) {let cost = new Decimal(2).times(x.add(1))
            return cost},
            display() { return autoThisBuyableDisplay("Divide Research Requirement by "+format(getBuyableAmount('r', 23).add(2))+". Hold to buy max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 11).pow_base(getBuyableAmount('r', 23).add(2))},
            tooltip() {return "Currently: √∑"+format(buyableEffect('r', 11))},
            buyMax() {
                let max = player.r.points.div(2).sub(1)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        12: {
            title: "Wildlife Booster",
            cost(x) {let cost = new Decimal(3).times(x.add(2))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Wildlife gain by "+format(getBuyableAmount('r', 23).add(2))+".<br> Unlocks more Wildlife Upgrades after 2 Purchases.<br> Hold to buy max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 12).pow_base(getBuyableAmount('r', 23).add(2))},
            tooltip() {return "Currently: x"+format(buyableEffect('r', 12))},
            buyMax() {
                let max = player.r.points.div(3).sub(2)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        13: {
            title: "Requirement Reduction II",
            cost(x) {let cost = new Decimal(2).times(x.add(2))
            return cost},
            display() { return autoThisBuyableDisplay("Divide Research Requirement by Research. Hold to buy max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 13).pow_base(player.r.points.add(1))},
            tooltip() {return "Currently: √∑"+format(buyableEffect('r', 13))},
            buyMax() {
                let max = player.r.points.div(2).sub(2)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        21: {
            title: "Time Speed Increase",
            cost(x) {let cost = new Decimal(5).times(x.add(1))
            return cost},
            display() { return autoThisBuyableDisplay("Multiply Research Time Gain by "+format(getBuyableAmount('r', 31).times(2).add(3))+". Hold to buy max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 21).pow_base(getBuyableAmount('r', 31).times(2).add(3))},
            tooltip() {return "Currently: x"+format(buyableEffect('r', 21))},
            buyMax() {
                let max = player.r.points.div(5).sub(1)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        22: {
            title: "Advanced Requirement Reduction",
            cost(x) {let cost = new Decimal(hasUpgrade('r', 21) ? 9 : 10).times(x.add(50))
            return cost},
            display() { return autoThisBuyableDisplay("Divide Research Requirement Based on Plants. (free) Hold to buy max.", this, " Gardens")},
            canAfford() { return player.g.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 22).pow_base(player.p.points.add(10).log(10))},
            tooltip() {return "Currently: √∑"+format(buyableEffect('r', 22))+". Currently Dividing by "+format(player.p.points.add(10).log(10))+" When Bought"},
            buyMax() {
                let max = player.g.points.div(hasUpgrade('r', 21) ? 9 : 10).sub(50)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        23: {
            title: "Wildlife Superbooster",
            cost(x) {let cost = new Decimal(2).times(x.add(2))
            return cost},
            display() { return autoThisBuyableDisplay("Increase Requirement Reduction and Wildlife Booster Base by 1. Hold to buy max.", this, " Wildlife Boosters")},
            canAfford() { return getBuyableAmount('r', 12).gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) addBuyables('r', 12, (this.cost().times(-1)))
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            tooltip() {return "Currently: +"+format(getBuyableAmount('r', 23))+". "},
            buyMax() {
                let max = getBuyableAmount('r', 12).div(2).sub(2)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        31: {
            title: "Time Speed Superincrease",
            cost(x) {let cost = new Decimal(2).times(x.add(2.5))
            return cost},
            display() { return autoThisBuyableDisplay("Increase Time Speed Increase Base by 2. Hold to buy max.", this, " Time Speed Increases")},
            canAfford() { return getBuyableAmount('r', 21).gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) addBuyables('r', 21, (this.cost().times(-1)))
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            unlocked() {return player.r.best.gte(25)},
            tooltip() {return "Currently: +"+format(getBuyableAmount('r', 31).times(2))+". "},
            buyMax() {
                let max = getBuyableAmount('r', 21).div(2).sub(2.5)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        32: {
            title: "Researchers",
            cost(x) {let cost = new Decimal(5 + upgradeEffect('r', 23)).times(x.add(7))
            return cost},
            display() { return autoThisBuyableDisplay("Find Researchers to help. Researchers Multiply Research Gain by Researchers + 1. You have "+format(player.r.researchers)+" Researchers. Hold to buy max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 32).pow_base(2).times(getBuyableAmount('r', 32)).times(buyableEffect('r', 33))},
            unlocked() {return player.r.best.gte(38)},
            tooltip() {return "Currently: +"+format(buyableEffect('r', 32))+"/sec."},
            buyMax() {
                let max = player.r.points.div(5 + upgradeEffect('r', 23)).sub(7)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        33: {
            title: "Research Booster",
            cost(x) {let cost = new Decimal(10 + upgradeEffect('r', 23)).times(x.add(5))
            return cost},
            display() {return autoThisBuyableDisplay("Reset Researchers but Multiply Their Gain based on Research Time. Hold to Buy Max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.researchers = new Decimal(0)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount('r', 33).pow_base(tmp.r.baseAmount.add(1).log(10))},
            unlocked() {return player.r.best.gte(53)},
            tooltip() {return "Currently: x"+format(buyableEffect('r', 33))+". Currently Multiplying by "+format(tmp.r.baseAmount.add(1).log(10))+" When Bought"},
            buyMax() {
                let max = player.r.points.div(10 + upgradeEffect('r', 23)).sub(5)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        41: {
            title: "Plant Division",
            cost(x) {let cost = new Decimal(10).times(x.add(10))
            return cost},
            display() {return autoThisBuyableDisplay("Divide Plant Costs Based on Researchers. Hold to Buy Max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.researchers = new Decimal(0)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount(this.layer, this.id).pow_base(player.r.researchers.add(1).log(10))},
            unlocked() {return hasAchievement('re', 21)},
            tooltip() {return "Currently: x"+format(buyableEffect('r', 41))+". "},
            buyMax() {
                let max = player.r.points.div(10).sub(10)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        42: {
            title: "Genetic Modification",
            cost(x) {let cost = new Decimal(50).times(x.add(10))
            return cost},
            display() {return autoThisBuyableDisplay("Larger Wildlife Gain is Multiplied by Research. Hold to Buy Max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.researchers = new Decimal(0)
                player.r.resetTimes = 0},
            effect() {return getBuyableAmount(this.layer, this.id).pow_base(player.r.points)},
            unlocked() {return hasAchievement('re', 22)},
            tooltip() {return "Currently: x"+format(buyableEffect('r', 42))+". "},
            buyMax() {
                let max = player.r.points.div(50).sub(10)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
        43: {
            title: "Upcycling",
            cost(x) {let cost = new Decimal(10).times(x.add(10))
            return cost},
            display() {return autoThisBuyableDisplay("Garden Costs are Divided by This Buyable's Amount. Hold to Buy Max.", this, " Research")},
            canAfford() { return player.r.points.gte(this.cost()) },
            buy() {
                if(hasAchievement('e', 25)) {
                    buyMaxBuyable(this.layer, this.id)
                    return;
                }
                if(!hasUpgrade('t', 14)) player.r.points = player.r.points.minus(this.cost())
                addBuyables(this.layer, this.id, 1)
                player.r.researchers = new Decimal(0)
                player.r.resetTimes = 0
            },
            effect() {return getBuyableAmount(this.layer, this.id).add(1)},
            unlocked() {return hasAchievement('re', 23)},
            tooltip() {return "Currently: √∑"+format(buyableEffect('r', 43))+". "},
            buyMax() {
                let max = player.r.points.div(10).sub(10)
                if(max.gte(thisBuyableAmount(this))) setBuyableAmount(this.layer, this.id, max.add(1).floor())
            },
        },
    },
    upgrades: {
        11: {
            title: "Wildlife Conversion Booster",
            description: "Plants -> Wildlife Conversion is Better",
            cost: (new Decimal(11)),
            tooltip: "1.5rt Plants -> 1.1rt Plants",
        },
        12: {
            title: "Wildlife-Friendly Fertilizer",
            description: "Plants Boost Research Time Gain",
            cost: (new Decimal(19)),
            effect() {return player.p.points.add(1).pow(0.3)},
            effectDisplay() {return "x"+format(upgradeEffect('r', 12))},
            tooltip: "Plants ^ 0.3",
        },
        13: {
            title: "Point Research Facility",
            description: "Points Boost Research Time Gain",
            cost: (new Decimal(23)),
            effect() {return player.points.max(0).add(3000).log(5).log(5)},
            effectDisplay() {return "x"+format(upgradeEffect('r', 13))},
            tooltip: "log5 (log5 (Points))",
        },
        14: {
            title: "Plant Robotics",
            description: "Autobuy Prickly Pear, Increase 'Nutrients' limit by 5 and Research Time is Multiplied Based on it's Magnitude",
            cost: (new Decimal(27)),
            effect() {return tmp.r.baseAmount.add(1).log(10).floor().pow_base(1.6)},
            effectDisplay() {return "x"+format(upgradeEffect('r', 14))},
            tooltip: "Uses '1.6 ^' Instead of '2 ^' Plant Robotics Magnitude is Separate and unaffected by 'Parsley'",
        },
        15: {
            title: "Plant Robotics Mk II",
            description: "Multiply Research Time by Wildlife Boosters, Autobuy Nutrients and Increase its Limit by 5",
            cost: (new Decimal(49)),
            effect() {return getBuyableAmount('r', 12).add(1)},
        },
        21: {
            title: "Resource Abundance",
            description: "Reduce 'Advanced Requirement Reduction' Cost scaling to 9",
            cost: (new Decimal(59)),
            unlocked() {return hasUpgrade('r', 15)},
        },
        22: {
            title: "Refining Research",
            description: "Research Effect is <u>Much</u> Better",
            cost: (new Decimal(67)),
            unlocked() {return hasUpgrade('r', 15)},
            tooltip: "^ 3 -> ^ 100"
        },
        23: {
            title: "Research Superbooster",
            description: "Researcher Based Buyables' Cost Scaling is Reduced by 1",
            cost: (new Decimal(89)),
            unlocked() {return hasUpgrade('r', 15)},
            effect() {return hasUpgrade('r', 23) ? -1 : 0},
        },
        24: {
            title: "Smarter Wildlife",
            description: "Unlock 4 New Wildlife Upgrades",
            cost: (new Decimal(97)),
            unlocked() {return hasUpgrade('r', 15)},
        },
        25: {
            title: "Scientific Breakthrough",
            description: "Unlock Trees",
            cost: (new Decimal(120)),
            unlocked() {return hasUpgrade('r', 15)},
            tooltip: "Trees are Part of the Plant Layer",
        },
        31: {
            title: "Light Strengthener",
            description: "Increase Nutrients Limit by 5",
            cost: (new Decimal(335)),
            unlocked() {return hasUpgrade('t', 83)},
            effect() {return 5},
        },
        32: {
            title: "Air-Diluted Water",
            description: "Multiply Leaf Gain based on Their own Magnitude",
            cost: (new Decimal(344)),
            unlocked() {return hasUpgrade('t', 83)},
            effect() {return player.t.leaves.add(10).log(10).floor().pow_base(1.6)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Also known as 'Bubbles', same as 'Plant Robotics'",
        },
        33: {
            title: "Light-Leaf Penetration",
            description: "Actually Buy Max Prickly Pears",
            cost: (new Decimal(375)),
            unlocked() {return hasUpgrade('t', 83)},
        },
        34: {
            title: "Fishing Pole",
            description: "Multiply Fish Gain Based on Research",
            cost: (new Decimal(1130)),
            unlocked() {return hasUpgrade('e', 21)},
            effect() {return player.r.points.div(100).root(2).div(5).add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "sqrt (Research √∑ 100) √∑ 5 + 1",
        },
        35: {
            title: "Lure",
            description: "Multiply Ecology Gain Based on Fish",
            cost: (new Decimal(2600)),
            unlocked() {return hasUpgrade('e', 21)},
            effect() {return player.w.fish.add(2).log(2).root(2)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "sqrt (log2 (Fish))",
        },
    },
    minigameScore() { // Research Minigame
        let score = new Decimal(Object.keys(tmp.r.clickables).filter(data => [22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66].includes(Number(data)) && getClickableState('r', data)).length)
        score = score.pow(new Decimal(Object.keys(tmp.r.clickables).filter(data => [21, 31, 41, 51, 61].includes(Number(data)) && tmp.r.clickables[data].canClick).length).add(1))

        return score
    },
    milestones: {
        0: {
            requirementDescription: "1 Minigame Score",
            effectDescription() {return "Minigame Score multiplies Research Speed | Currently: √ó"+format(this.effect())},
            done() {return tmp.r.minigameScore.gte(1)},
            effect() {return tmp.r.minigameScore.add(1).pow(100)},
        },
        1: {
            requirementDescription: "10 Minigame Score",
            effectDescription() {return "Minigame Score multiplies Point Gain | Currently: √ó"+format(this.effect())},
            done() {return tmp.r.minigameScore.gte(10)},
            effect() {return tmp.r.minigameScore.add(1).pow(5000)},
        },
        2: {
            requirementDescription: "10,000 Minigame Score",
            effectDescription() {return "Minigame Score multiplies Fish Gain | Currently: √ó"+format(this.effect())},
            done() {return tmp.r.minigameScore.gte(10000)},
            effect() {return tmp.r.minigameScore.add(1).root(2)},
        },
        3: {
            requirementDescription: "244,140,625 Minigame Score",
            effectDescription() {return "Reseach and research time multiplies point gain | Currently: √ó"+format(this.effect())},
            done() {return tmp.r.minigameScore.gte(244140625)},
            effect() {
                return tmp.r.baseAmount.add(1).pow(player.r.points.pow(0.75))
            },
        },
    },
    clickables: {
        11: {
            display() {return "Use "+format(this.cost())+" Research to get a minigame token"},
            canClick() {return player.r.points.gte(this.cost()) && !getClickableState('r', 11)},
            cost() {
                let cost1 = new Decimal(Object.keys(tmp.r.clickables).filter(data => [21, 31, 41, 51, 61].includes(Number(data)) && tmp.r.clickables[data].canClick).length).mul(1000)
                let cost2 = new Decimal(Object.keys(tmp.r.clickables).filter(data => [22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66].includes(Number(data)) && getClickableState('r', data)).length).mul(100)
                return cost1.add(cost2).add(14000)
            },
            onClick() {
                player.r.points = player.r.points.sub(this.cost())
                player.r.resetTime = 0
                setClickableState('r', 11, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        12: {
            display: "Activate a random clickable in this column",
            canClick() {return getClickableState('r', 11)},
            onClick() {
                setClickableState('r', 11, false)
                let activate = [22, 32, 42, 52, 62]
                activate = activate[Math.floor(Math.random()*activate.length)]
                setClickableState('r', activate, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        13: {
            display: "Activate a random clickable in this column",
            canClick() {return getClickableState('r', 11)},
            onClick() {
                setClickableState('r', 11, false)
                let activate = [23, 33, 43, 53, 63]
                activate = activate[Math.floor(Math.random()*activate.length)]
                setClickableState('r', activate, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        14: {
            display: "Activate a random clickable in this column",
            canClick() {return getClickableState('r', 11)},
            onClick() {
                setClickableState('r', 11, false)
                let activate = [24, 34, 44, 54, 64]
                activate = activate[Math.floor(Math.random()*activate.length)]
                setClickableState('r', activate, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        15: {
            display: "Activate a random clickable in this column",
            canClick() {return getClickableState('r', 11)},
            onClick() {
                setClickableState('r', 11, false)
                let activate = [25, 35, 45, 55, 65]
                activate = activate[Math.floor(Math.random()*activate.length)]
                setClickableState('r', activate, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        16: {
            display: "Activate a random clickable in this column",
            canClick() {return getClickableState('r', 11)},
            onClick() {
                setClickableState('r', 11, false)
                let activate = [26, 36, 46, 56, 66]
                activate = activate[Math.floor(Math.random()*activate.length)]
                setClickableState('r', activate, true)
            },
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        21: {
            canClick() {
                let click = true
                for(id of [22, 23, 24, 25, 26]) {
                    click = click && getClickableState('r', id)
                }
                return click
            },
            display() {return this.canClick() ? "Complete" : "Incomplete"},
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        31: {
            canClick() {
                let click = true
                for(id of [32, 33, 34, 35, 36]) {
                    click = click && getClickableState('r', id)
                }
                return click
            },
            display() {return this.canClick() ? "Complete" : "Incomplete"},
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        41: {
            canClick() {
                let click = true
                for(id of [42, 43, 44, 45, 46]) {
                    click = click && getClickableState('r', id)
                }
                return click
            },
            display() {return this.canClick() ? "Complete" : "Incomplete"},
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        51: {
            canClick() {
                let click = true
                for(id of [52, 53, 54, 55, 56]) {
                    click = click && getClickableState('r', id)
                }
                return click
            },
            display() {return this.canClick() ? "Complete" : "Incomplete"},
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        61: {
            canClick() {
                let click = true
                for(id of [62, 63, 64, 65, 66]) {
                    click = click && getClickableState('r', id)
                }
                return click
            },
            display() {return this.canClick() ? "Complete" : "Incomplete"},
            style() {return {
                    'min-height': '75px',
                    'width': '75px',
            }},
        },
        ...getBlankClickables([22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66], 'r')
    },
}),
addLayer("t", { // Trees layer
    name: "trees", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üå≤" : "T"},
    position: 1, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
        leaves: new Decimal(0),
        resetTime: 0,
    }},
    tree: "tree-tab",
    color: "#278000",
    requires() {
        let req = new Decimal("1e2700")
        req = req.dividedBy(hasUpgrade('t', 12) ? tmp.t.effect2 : 1)
        return req
    }, // Can be a function that takes requirement increases into account
    resource: "trees", // Name of prestige currency
    baseResource: "points", // Name of resource prestige is based on
    baseAmount() {
        let amt = player.points.max(0)
        amt = amt.pow(smartUpgradeEffect('n', 71))
        if(inChallenge('n', 12)) amt = amt.div(amt.add(1).log(10).add(1))
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1, // Prestige currency exponent
    base() {let base = new Decimal("1e10")
    return base},
    milestonePopups() {return !player.re.best.gte(1)},
    canBuyMax: true,
    autoUpgrade() {return player.t.autoUpgrade && (hasMilestone('re', 1) || hasMilestone('c', 6))},
    autoPrestige() {return hasMilestone('g', 0) && !(hasMilestone('t', 0) && player.t.bulk && getResetGain('t').lt(10))},
    resetsNothing() {return hasMilestone('g', 0)},
    tabFormat: [
        "main-display",
        "prestige-button",
        "blank",
        "blank",
        ["upgrades", [1, 2]],
        "blank",
        ["buyables", [1]],
        "blank",
        ["upgrades", [3, 4, 5]],
        "blank",
        ["milestones", [0, 1, 2, 3, 4]],
        "blank",
        ["upgrades", [6]],
        "blank",
        ["upgrades", [7, 8, 9]],
        "blank",
        ["upgrades", [10, 11, 12, 13]],
        "blank",
    ],
    effect() {
        let effect = player.t.points.add(1).pow(10 + smartUpgradeEffect('t', 14, 0))
        return effect
    },
    effect2() {
        let effect = player.t.leaves.times(0.01).add(1).pow(100)
        if(getClickableState('n', 11) && !(hasMilestone('c', 2))) effect = effect.add(1).log(10).add(1)
        return effect
    },
    automate() {
        if(hasUpgrade('t', 13)) {
            buyBuyable('r', 11)
            buyBuyable('r', 12)
            buyBuyable('r', 13)
            buyBuyable('r', 21)
            buyBuyable('r', 22)
            buyBuyable('r', 23)
            buyBuyable('r', 31)
            buyBuyable('r', 32)
            buyBuyable('r', 33)
        }
        if(hasMilestone('t', 1)) {
            buyBuyable('g', 11)
            buyBuyable('g', 12)
            buyBuyable('g', 13)
            buyBuyable('g', 21)
        }
        if(hasMilestone('z', 5)) {
            buyBuyable('t', 11)
            buyBuyable('t', 12)
            buyBuyable('t', 13)
        }
    },
    effectDescription() {
        let desc = "Trees are Multiplying Point gain <u>and Plant Costs</u> by "+format(tmp.t.effect)+". Trees are Affected by the 1st Garden Milestone. "
        if(player.t.best.gte(20)) desc = desc + "You have "+format(player.t.leaves)+" Leaves, Dividing Tree Requirements by "+format(tmp.t.effect2)+". "
        return desc
        },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;

        let keptUpgrades = [];
        if(getClickableState('n', 11)) keptUpgrades.push(13, 14)
        
        let keep = [];
        if(layers[resettingLayer].row <= 1) keep.push("upgrades"), keep.push("buyables"), keep.push("milestones")
        if(resettingLayer==='e' && hasMilestone('e', 5)) keep.push("upgrades")
        if(resettingLayer==='e' && hasAchievement('e', 11)) keep.push("milestones")
        if(hasUpgrade('n', 44)&&row<=3) keep.push("upgrades"), keep.push("milestones")
        layerDataReset(this.layer, keep)

        player.t.upgrades = player.t.upgrades.concat(keptUpgrades)
    },
    onPrestige() {
        if(!hasMilestone('t', 2)) player.t.leaves = new Decimal(0)
    },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if(hasUpgrade('t', 131)) mult = mult.div(upgradeEffect('t', 131)[1])
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        let exp = new Decimal(1)
        return exp
    },
    directMult() {
        let mult = new Decimal(1)
        if(inChallenge('n', 14) && player.n.plantBug) mult = mult.mul(0.01)
        if(hasUpgrade('m', 11)) mult = mult.mul(tmp.m.effect.main)
        return mult
    },
    update(diff) {
        let cap = new Decimal("1e50")
        cap = cap.mul(buyableEffect('m', 13))
        player.t.leaves = player.t.leaves.add(smartUpgradeEffect('t', 12, new Decimal(0)).times(diff)).min(cap)
    },
    row: 0, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        {layer: 't', key: "t", description: "T: Reset for Trees", onPress(){if (canReset(this.layer)) doReset(this.layer)}, unlocked() {return hasUpgrade('r', 25)}},
    ],
    layerShown(){return false},
    upgrades: {
        11: {
            title: "Incremental God Tree",
            description: "Multiply Research Speed by Trees",
            cost: (new Decimal(10)),
            effect() {return player.t.points.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
        },
        12: {
            title: "Apple Tree",
            description: "Every Tree Generates 1 Leaf Every Second",
            cost: (new Decimal(12)),
            unlocked() {return hasUpgrade('t', 11)},
            effect() {
                let effect = player.t.points
                effect = effect.times(smartUpgradeEffect('t', 42))
                if(hasMilestone('t', 2)) effect = effect.times(player.t.leaves.add(1).pow(0.1))
                effect = effect.times(smartUpgradeEffect('t', 81))
                effect = effect.times(smartUpgradeEffect('r', 32))
                effect = effect.times(clickableEffect('e', 12))
                if(hasAchievement('re', 14)) effect = effect.times(2)
                effect = effect.times(smartUpgradeEffect('g', 53))
                effect = effect.mul(tmp.c.effect.leaves)
                return effect
            },
            effectDisplay() {return format(thisUpgradeEffect(this))+"/sec. You have "+format(player.t.leaves)+" Leaves, Dividing Tree Requirements by "+format(player.t.leaves.times(0.01).add(1).pow(100))+"."},
            tooltip: "Leaf Effect: (Leaves √∑ 100) ^ 100"
        },
        13: {
            title: "Pear Tree",
            description: "Automatically Reset for Gardens, Automatically buy Research Buyables and Reduce Research Base by 0.05",
            cost: (new Decimal(22)),
            unlocked() {return hasUpgrade('t', 11)},
            effect() {return 0.05},
        },
        14: {
            title: "Apricot Tree",
            description: "Tree Effect is now ^ 100 and Doesn't Affect Plant Costs and Research Buyables Cost Nothing",
            cost: (new Decimal(30)),
            unlocked() {return hasUpgrade('t', 11)},
            effect() {return 90},
        },
        21: {
            title: "Tree of Life",
            description: "Multiply Point Gain based on A, B and C and Unlock Buyables for Each",
            cost: (new Decimal(130)),
            effect() {return getBuyableAmount('t', 11).add(1).add(smartUpgradeEffect('t', 31, 0)).add(smartUpgradeEffect('t', 44, 0)).pow(getBuyableAmount('t', 12).add(1).add(smartUpgradeEffect('t', 32, 0))).pow(getBuyableAmount('t', 13).add(1).add(smartUpgradeEffect('t', 33, 0)))},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip() {return "(A ^ B) ^ C. A = "+format(getBuyableAmount('t', 11).add(1).add(smartUpgradeEffect('t', 31, 0)).add(smartUpgradeEffect('t', 44, 0)))+", B = "+format(getBuyableAmount('t', 12).add(1).add(smartUpgradeEffect('t', 32, 0)))+" and C = "+format(getBuyableAmount('t', 13).add(1).add(smartUpgradeEffect('t', 33, 0)))},
        },
        31: {
            title: "The Plague Tree",
            description: "A is Increased Based on Leaves",
            cost: (new Decimal(245)),
            effect() {return new Decimal(player.t.leaves).root(10)},
            effectDisplay() {return "+"+format(thisUpgradeEffect(this))},
            tooltip: "10rt (Leaves)",
        },
        32: {
            title: "Anti-Vaxxers",
            description: "B is Increased Based on Leaves",
            cost: (new Decimal(260)),
            unlocked() {return hasUpgrade('t', 31)},
            effect() {return new Decimal(player.t.leaves).root(10)},
            effectDisplay() {return "+"+format(thisUpgradeEffect(this))},
            tooltip: "10rt (Leaves)",
        },
        33: {
            title: "Adverse-Vaxxers",
            description: "C is Increased Based on Leaves",
            cost: (new Decimal(290)),
            unlocked() {return hasUpgrade('t', 31)},
            effect() {return new Decimal(player.t.leaves).root(10)},
            effectDisplay() {return "+"+format(thisUpgradeEffect(this))},
            tooltip: "10rt (Leaves)",
        },
        41: {
            title: "The Camellia Tree Rewritten",
            description: "Unlocks Standard Notation",
            cost: (new Decimal(325)),
        },
        42: {
            title: "QiV",
            description: "Multiply Leaf Gain by Research",
            cost: (new Decimal(325)),
            unlocked() {return hasUpgrade('t', 41)},
            effect() {return player.r.points.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
        },
        43: {
            title: "MeT",
            description: "Multiply Research Speed based on Leaves",
            cost: (new Decimal(400)),
            unlocked() {return hasUpgrade('t', 41)},
            effect() {return player.t.leaves.add(1).root(2)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "sqrt (Leaves)",
        },
        44: {
            title: "YuC'e",
            description: "A is Increased by Trees",
            cost: (new Decimal(420)),
            unlocked() {return hasUpgrade('t', 41)},
            effect() {return player.t.points},
        },
        51: {
            title: "The Milestone Tree",
            description: "Unlock Tree Milestones",
            cost: (new Decimal(700)),
        },
        61: {
            title: "The Plant Tree",
            description: "Unlock a Miniature Version of <i>The Plant Tree</i>",
            cost: (new Decimal(1100)),
        },
        71: {
            title: "Plants",
            description: "Divide Plant Costs by Leaves Effect at an Increased Rate",
            cost: (new Decimal(1100)),
            unlocked() {return hasUpgrade('t', 61)},
            effect() {return tmp.t.effect2.pow(5)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "'^ 500' Instead of '^ 100'",
        },
        72: {
            title: "Trees",
            description: "Multiply Research Speed Based on Trees",
            cost: (new Decimal(6000)),
            unlocked() {return hasUpgrade('t', 83)},
            effect() {return upgradeEffect('t', 11)},
            effectDisplay() {return "x"+format(upgradeEffect('t', 11))},
        },
        73: {
            title: "Wildlife",
            description: "Wildlife Multiplies Research Speed",
            cost: (new Decimal(1750)),
            unlocked() {return hasUpgrade('t', 81)},
            effect() {return player.w.points.add(5).log(5)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "log5 (Wildlife)",
        },
        81: {
            title: "Zones",
            description: "Multiply Leaf Gain Based on Zones",
            cost: (new Decimal(1210)),
            unlocked() {return hasUpgrade('t', 82)},
            effect() {return player.z.points.add(1).pow(3)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            tooltip: "Zones ^ 3",
        },
        82: {
            title: "Gardens",
            description: "Divide Garden Costs based on Trees",
            cost: (new Decimal(1140)),
            unlocked() {return hasUpgrade('t', 71)},
            effect() {return player.t.points.dividedBy(100).add(1).pow(0.2)},
            effectDisplay() {return "√∑"+format(thisUpgradeEffect(this))},
            tooltip: "(Trees √∑ 100) ^ 0.2",
        },
        83: {
            title: "Research",
            description: "Unlock a New Row of Research Upgrades",
            cost: (new Decimal(1880)),
            unlocked() {return hasUpgrade('t', 73)},
        },
        91: {
            title: "Ecosystems",
            description: "Unlock Ecosystems",
            cost: (new Decimal(6700)),
            unlocked() {return hasUpgrade('t', 72)},
        },
        101: {
            title: "Prestige",
            description: "Multiply Extra Point Magnitude gain by 2",
            cost: new Decimal("1e8"),
            unlocked() {return hasMilestone('n', 0)},
            onPurchase() {
                player.points = new Decimal(0)
                player.t.leaves = new Decimal(0)
                layerDataReset('p', ["upgrades", "milestones", "challenges", "achievements"])
            },
            tooltip: "Resets Plants and leaves on Purchase"
        },
        111: {
            title: "Kilo-Prestige",
            description: "Multiply Point gain based on trees",
            cost: new Decimal("1.75e8"),
            unlocked() {return hasMilestone('n', 0)},
            onPurchase() {
                player.points = new Decimal(0)
                player.t.leaves = new Decimal(0)
                layerDataReset('p', ["upgrades", "milestones", "challenges", "achievements"])
                Vue.set(player.t, "upgrades", arrayRemove(player.t.upgrades, [101, '101']))
            },
            canAfford() {return hasUpgrade('t', 101)},
            effect() {return player.t.points.root(1.5).pow_base(10)},
            effectDisplay() {return "√ó"+format(this.effect())},
            tooltip: "10 ^ 1.5rt (Trees)<br>Resets Plants, leaves and previous MVGT Upgrades on Purchase",
        },
        121: {
            title: "Mega-Prestige",
            description: "Multiply Wildlife gain based on trees",
            cost: new Decimal("2.25e8"),
            unlocked() {return hasMilestone('n', 0)},
            onPurchase() {
                player.points = new Decimal(0)
                player.t.leaves = new Decimal(0)
                layerDataReset('p', ["upgrades", "milestones", "challenges", "achievements"])
                Vue.set(player.t, "upgrades", arrayRemove(player.t.upgrades, [101, '101', 111, '111']))
            },
            canAfford() {return hasUpgrade('t', 101) && hasUpgrade('t', 111)},
            effect() {return player.t.points.root(2).pow_base(10)},
            effectDisplay() {return "√ó"+format(this.effect())},
            tooltip: "10 ^ sqrt (Trees)<br>Resets Plants, leaves and previous MVGT Upgrades on Purchase",
        },
        131: {
            title: "Giga-Prestige",
            description: "Research and Trees boost each other",
            cost: new Decimal("4e8"),
            unlocked() {return hasMilestone('n', 0)},
            onPurchase() {
                player.points = new Decimal(0)
                player.t.leaves = new Decimal(0)
                layerDataReset('p', ["upgrades", "milestones", "challenges", "achievements"])
                Vue.set(player.t, "upgrades", arrayRemove(player.t.upgrades, [101, '101', 111, '111', 121, '121']))
            },
            canAfford() {return hasUpgrade('t', 101) && hasUpgrade('t', 111) && hasUpgrade('t', 121)},
            effect() {return [(player.t.points.add(1).pow(200)), (tmp.r.baseAmount.add(1))]},
            effectDisplay() {return "√ó"+format(this.effect()[0])+" Research speed and √∑"+format(this.effect()[1])+" Tree requirements"},
            tooltip: "Trees ^ 200, Research time<br>Resets Plants, leaves and previous MVGT Upgrades on Purchase",
        },
    },
    buyables: {
        11: {
            title: "A Increase",
            cost(x) {let cost = thisBuyableAmount(this).pow_base(1.005).times(130)
            return cost},
            display() {return autoThisBuyableDisplay("Increase A by 1. Hold to Buy Max.", this, " Trees", "/"+format(tmp[this.layer].buyables[this.id].purchaseLimit))},
            canAfford() { return player.t.points.gte(this.cost()) },
            buy() {
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('t', 21)},
            purchaseLimit() {return 25 + smartMilestoneEffect('t', 3, 0)},
        },
        12: {
            title: "B Increase",
            cost(x) {let cost = thisBuyableAmount(this).pow(1.1).pow_base(1.01).times(130)
            return cost},
            display() {return autoThisBuyableDisplay("Increase B by 1. Hold to Buy Max.", this, " Trees", "/"+format(tmp[this.layer].buyables[this.id].purchaseLimit))},
            canAfford() { return player.t.points.gte(this.cost()) },
            buy() {
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('t', 21)},
            purchaseLimit() {return 25 + smartMilestoneEffect('t', 3, 0)},
        },
        13: {
            title: "C Increase",
            cost(x) {let cost = thisBuyableAmount(this).pow(2).pow_base(1.02).times(130)
            return cost},
            display() {return autoThisBuyableDisplay("Increase C by 1. Hold to Buy Max.", this, " Trees", "/"+format(tmp[this.layer].buyables[this.id].purchaseLimit))},
            canAfford() { return player.t.points.gte(this.cost()) },
            buy() {
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('t', 21)},
            purchaseLimit() {return 25 + smartMilestoneEffect('t', 3, 0)},
        },
    },
    milestones: {
        0: {
            requirementDescription: "700 Trees",
            effectDescription: "You Can Increase Tree Bulk to 10",
            done() {return tmp.t.milestones[this.id].unlocked && player.t.points.gte(700)},
            unlocked() {return hasUpgrade('t', 51)},
            toggles: [["t", "bulk"]],
        },
        1: {
            requirementDescription: "750 Trees",
            effectDescription: "Automatically Buy the First 4 Garden Buyables",
            done() {return tmp.t.milestones[this.id].unlocked && player.t.points.gte(750)},
            unlocked() {return hasUpgrade('t', 51)},
        },
        2: {
            requirementDescription: "780 Trees",
            effectDescription() {return "You Keep Leaves on Tree Reset and Multiply Their Gain based on Themselves<br>Currently: x"+format(new Decimal(player.t.leaves).add(1).pow(0.1))},
            done() {return tmp.t.milestones[this.id].unlocked && player.t.points.gte(780)},
            unlocked() {return hasUpgrade('t', 51)},
        },
        3: {
            requirementDescription: "900 Trees",
            effectDescription: "Increase the Tree of Life Buyables Limit by 5",
            done() {return tmp.t.milestones[this.id].unlocked && player.t.points.gte(900)},
            unlocked() {return hasUpgrade('t', 51)},
            effect() {return 5},
        },
        4: {
            requirementDescription: "1200 Trees",
            effectDescription: "Keep Points on Research Reset",
            done() {return tmp.t.milestones[this.id].unlocked && player.t.points.gte(1200)},
            unlocked() {return hasUpgrade('t', 51)},
        },
    },
}),
addLayer("e", { // Ecosystems layer
    name: "ecosystems", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üåé" : "E"},
    position: 2, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: false,
		points: new Decimal(0),
        ecology: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
        resetTime: 0,
        cooldown: new Decimal(0),
        lastAbility: 11,
        autoAbility: false,
    }},
    tree: "tree-tab",
    color: "#11FF99",
    requires() {
        let req = new Decimal("1.6e6")
        req = req.div(smartMilestoneEffect('m', 4))
        return req
    }, // Can be a function that takes requirement increases into account
    resource: "Ecosystems", // Name of prestige currency
    baseResource: "plants", // Name of resource prestige is based on
    baseAmount() {
        let amt = player.p.points
        amt = amt.pow(smartUpgradeEffect('m', 33))
        return amt
    }, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1.1, // Prestige currency exponent
    base() {return 1.1},
    canBuyMax: true,
    autoUpgrade() {return player.t.autoUpgrade && hasMilestone('c', 7)},
    autoPrestige() {return player.e.autoReset},
    resetsNothing() {return player.e.autoReset},
    tabFormat: {
        "Main": {
            content: [
                "main-display",
                "prestige-button",
                "blank",
                ["display-text",
                    function() {return player.e.cooldown.lte(0) ? "Abilities Ready": format(player.e.cooldown)+"s"}
                ],
                "clickables",
                "blank",
                "milestones",
                () =>  hasMilestone('e', 9) ? "achievements" : undefined,
                "blank",
                "blank",
                "buyables",
                "blank",
                "blank",
                "upgrades",
            ],
        },
        "Ecology": {
            content: [
                "main-display",
                "prestige-button",
                "blank",
                ["display-text",
                    function() {return "You Have "+format(player.e.ecology)+" Ecology"}
                ],
                "blank",
                "blank",
                "buyables",
                "blank",
                "blank",
                "upgrades",
                "blank",
                "blank",
                "achievements",
                "blank",
                "blank",
            ],
            unlocked() {return hasMilestone('e', 9)},
        },
    },
    branches() {
        let branches = ['g', 'z']
        if(player.g.best.lt(1)) branches.push('p')
        return branches
    },
    onPrestige() {
        if(!tmp.e.resetsNothing) player.e.ecology = new Decimal(0)
    },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if(hasAchievement('a', 73)) mult=mult.dividedBy(1.2)
        mult = mult.div(smartMilestoneEffect('n', 3, {eco: 1, rec: 1}).eco)
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    update(diff) {
        player.e.cooldown = player.e.cooldown.minus(diff)
        let active = getClickableState('e', 11) && !hasAchievement('e', 15)
        if(!active) active = getClickableState('e', 12) && !hasMilestone('c', 4)
        if(player.e.cooldown.lte(0) && active) {
            if(!hasAchievement('e', 15)) setClickableState('e', 11, false)
            if(!hasMilestone('c', 4)) setClickableState('e', 12, false)
            let cooldown = new Decimal(30)
            if(hasMilestone('e', 4)) cooldown = cooldown.minus(10)
            cooldown = cooldown.dividedBy(smartUpgradeEffect('p', 82))
            cooldown = cooldown.div(smartMilestoneEffect('re', 4))
            player.e.cooldown = cooldown
        }
        if(hasMilestone('e', 6) && player.e.autoAbility && player.e.cooldown.lte(0)) {
            tmp.e.clickables[player.e.lastAbility].onClick()
        }
        if(hasMilestone('e', 9)) player.e.ecology = getLogisticAmount(player.e.ecology, milestoneEffect('e', 9), 0.1, diff)

        if(hasAchievement('e', 15)) setClickableState('e', 11, true)
        if(hasMilestone('c', 4)) setClickableState('e', 12, true)
    },
    row: 2, // Row the layer is in on the tree (0 is the first row)
    doReset(resettingLayer) {
        if(layers[resettingLayer].row <= this.row) return
        let row = layers[resettingLayer].row;
        if(hasUpgrade('n', 74) && row<=3) return

        let keep = [];
        if(hasUpgrade('c', 34) && (resettingLayer == 'c' || row <= 3)) keep.push("points", "milestones", "achievements")
        layerDataReset(this.layer, keep)
    },
    hotkeys: [
        {layer: 'e', key: "e", description: "E: Reset for Ecosystems", onPress(){if (canReset(this.layer)) doReset(this.layer)}, unlocked() {return tmp[this.layer].layerShown}},
    ],
    prestigeNotify() {return (canReset('e') || player.e.cooldown.lte(0)) && player.e.unlocked},
    layerShown(){return hasUpgrade('t', 91)||player.e.best.gte(1)},
    clickables: {
        11: {
            display() {return "Multiply Point Gain by "+format(player.e.points.add(1).pow(10))+" (10s).<br>Currently: "+(getClickableState('e', 11) ? "Active":"Inactive")},
            canClick() {return player.e.cooldown.lte(0) && !hasAchievement('e', 15)},
            unlocked() {return hasMilestone('e', 1)},
            effect() {return getClickableState(this.layer, this.id) ? player.e.points.add(1).pow(10) : 1},
            onClick() {
                setClickableState(this.layer, this.id, true)
                let duration = new Decimal(10)
                player.e.cooldown = duration
                player.e.lastAbility = 11
            },
        },
        12: {
            display() {return "Multiply Leaf Gain by "+format(new Decimal(5).add(hasMilestone('e', 8) ? player.e.points : 0).pow(hasAchievement('e', 23)?1.75:1))+" (5s).<br>Currently: "+(getClickableState('e', 12) ? "Active":"Inactive")},
            canClick() {return player.e.cooldown.lte(0) && !hasMilestone('c', 4)},
            unlocked() {return hasMilestone('e', 2)},
            effect() {return getClickableState(this.layer, this.id) ? new Decimal(5).add(hasMilestone('e', 8) ? player.e.points : 0).pow(hasAchievement('e', 23)?1.75:1) : 1},
            onClick() {
                setClickableState(this.layer, this.id, true)
                let duration = new Decimal(5)
                player.e.cooldown = duration
                player.e.lastAbility = 12
            },
        },
    },
    milestones: {
        0: {
            requirementDescription: "1 Ecosystem",
            effectDescription: "Keep Research Unlocked",
            done() {return player.e.points.gte(1)},
        },
        1: {
            requirementDescription: "1 Ecosystem and 4 Zones",
            effectDescription: "Unlock the First Ecosystem Ability",
            done() {return player.e.points.gte(1) && player.z.points.gte(4) && msReady},
        },
        2: {
            requirementDescription: "1 Ecosystem and 25 Trees",
            effectDescription: "Unlock the Second Ecosystem Ability",
            done() {return player.e.points.gte(1) && player.t.points.gte(25) && msReady},
        },
        3: {
            requirementDescription: "2 Ecosystems",
            effectDescription: "Zones Reset Nothing",
            done() {return player.e.points.gte(2)},
        },
        4: {
            requirementDescription: "2 Ecosystems and 260 Trees",
            effectDescription: "Reduce Abilities Cooldown by 10s (30s -> 20s)",
            done() {return player.e.points.gte(2) && player.t.points.gte(260) && msReady},
        },
        5: {
            requirementDescription: "3 Ecosystems",
            effectDescription: "Keep Tree Upgrades, Keep Trees Unlocked and Auto-Buy Plant Upgrades. (Gardens Always Reset Nothing)",
            done() {return player.e.points.gte(3)},
        },
        6: {
            requirementDescription: "3 Ecosystems and 1,500,000 Plants",
            effectDescription: "When Active, Automatically Trigger the Last Ability Triggered and Unlock 2 New Plant Upgrades",
            done() {return player.e.points.gte(3) && player.p.points.gte("1.5e6") && msReady},
            toggles: [["e", "autoAbility"]],
        },
        7: {
            requirementDescription: "4 Ecosystems",
            effectDescription: "Keep Row 1 and 2 Layers Unlocked",
            done() {return player.e.points.gte(4)},
        },
        8: {
            requirementDescription: "4 Ecosystems and 1,500,000 Plants",
            effectDescription: "Increase Second Ecosystem Ability Effect by Ecosystems",
            done() {return player.e.points.gte(4) && player.p.points.gte("1.5e6") && msReady},
        },
        9: {
            requirementDescription: "5 Ecosystems",
            effectDescription() {return "Generate Ecology and Lose 10%/sec. Currently: "+format(milestoneEffect('e', 9))+"/sec"},
            effect() {
                let effect = player.e.points.times(player.p.points.add(1).log(10))
                effect = effect.times(smartUpgradeEffect('e', 13))
                effect = effect.times(smartMilestoneEffect('z', 8))
                effect = effect.times(smartUpgradeEffect('z', 11))
                effect = effect.times(smartUpgradeEffect('r', 35))
                effect = effect.times(smartUpgradeEffect('w', 113))
                effect = effect.times(smartMilestoneEffect('re', 2))
                effect = effect.times(smartUpgradeEffect('e', 23))
                effect = effect.mul(smartUpgradeEffect('c', 22))
                effect = effect.mul(buyableEffect('m', 12))
                return effect
                },
            done() {return player.e.points.gte(5)},
        },
    },
    upgrades: {
        11: {
            title: "Plastic",
            description: "Raise Research Time to ^ 1.1",
            effect: 1.1,
            cost: (new Decimal(100)),
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
        },
        12: {
            title: "Paper",
            description: "Multiply Wildlife Gain by Ecology",
            effect() {return player.e.ecology.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            cost: (new Decimal(200)),
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
        },
        13: {
            title: "Bamboo",
            description: "Multiply Ecology Gain based on Ecology and Unlock a Buyable",
            effect() {return player.e.ecology.add(10).log(10)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            cost: (new Decimal(300)),
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
        },
        14: {
            title: "\"100% Recycled Materials\"",
            description: "Unlock Fish",
            cost: (new Decimal(40000)),
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
            tooltip: "Fish are found in the Wildlife Layer",
        },
        21: {
            title: "Vegetable Patch",
            description: "Reduce Research Exponent by 0.03 and Unlock 2 More Research Upgrades",
            cost: (new Decimal(172500)),
            unlocked() {return hasUpgrade('e', 14)},
            effect() {return 0.03},
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
        },
        22: {
            title: "Chicken Coop",
            description: "Multiply Wildlife Gain Based on Ecology",
            cost: (new Decimal(185000)),
            unlocked() {return hasUpgrade('e', 14)},
            effect() {return player.e.ecology.pow(100)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
            currencyDisplayName: "Ecology",
            currencyInternalName: "ecology",
            currencyLayer: "e",
        },
        23: {
            title: "Composting",
            description: "Multiply Ecology Gain by Plants",
            cost: (new Decimal(58)),
            unlocked() {return hasMilestone('re', 3)},
            effect() {return player.p.points.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
        },
        24: {
            title: "Mulching",
            description: "Multiply Point Gain by Widlife",
            cost: (new Decimal(67)),
            unlocked() {return hasMilestone('re', 3)},
            effect() {return player.w.points.add(1)},
            effectDisplay() {return "x"+format(thisUpgradeEffect(this))},
        },
    },
    buyables: {
        11: {
            title: "Recycling",
            cost(x) {
                let cost = x.times(100)
                if(x.gte(50)) cost = cost.pow(x.sub(25).div(25))
                if(x.gte(100)) cost = cost.pow(x.sub(99))
                cost = cost.times(smartMilestoneEffect('z', 8))
                return cost
            },
            display() { return autoThisBuyableDisplay("Multiply Zone Base (Above 1) by 0.95. Hold to buy max.", this, " Ecology", "/"+format(tmp.e.buyables[11].purchaseLimit))},
            canAfford() { return player.e.ecology.gt(this.cost()) },
            buy() {
                player.e.ecology = player.e.ecology.sub(this.cost()).max(0)
                addBuyables(this.layer, this.id, 1)},
            unlocked() {return hasUpgrade('e', 13)},
            effect() {return getBuyableAmount('e', 11).pow_base(0.95)},
            tooltip() {return "Currently: x"+format(thisBuyableEffect(this))},
            purchaseLimit() {
                let eff = 50*(hasUpgrade('w', 104)?2:1)
                if(hasUpgrade('c', 55)) eff = new Decimal(eff).mul(1.2)
                return eff
            },
        },
    },
    achievements: {
        11: {
            name: "6 Ecosystems",
            tooltip: "Reward: Keep Tree Milestones and 'Plant Robotics' on Reset",
            done() {return player.e.points.gte(6)},
        },
        12: {
            name: "7 Ecosystems",
            tooltip: "Reward: Keep Wildlife Upgrades on Reset",
            done() {return player.e.points.gte(7)},
        },
        13: {
            name: "8 Ecosystems",
            tooltip: "Reward: Keep Zone Milestones on Reset",
            done() {return player.e.points.gte(8)},
        },
        14: {
            name: "9 Ecosystems",
            tooltip: "Reward: Keep Research Upgrades on Reset",
            done() {return player.e.points.gte(9)},
        },
        15: {
            name: "10 Ecosystems",
            tooltip: "Reward: Remove The Ability to Activate the First Ecosystem Ability but it's Permanently Active",
            done() {return player.e.points.gte(10)},
            onComplete() {setClickableState('e', 11, true)},
        },
        21: {
            name: "15 Ecosystems",
            tooltip: "Reward: Keep Garden Upgrades and Milestones on Reset",
            done() {return player.e.points.gte(15)},
        },
        22: {
            name: "20 Ecosystems",
            tooltip: "Keep Zone Completions on Reset",
            done() {return player.e.points.gte(20)},
        },
        23: {
            name: "25 Ecosystems",
            tooltip: "Reward: Raise the Second Ecosystem Ability Effect to 1.75",
            done() {return player.e.points.gte(25)},
        },
        24: {
            name: "30 Ecosystems",
            tooltip: "Reward: Buy Max Garden Buyables",
            done() {return player.e.points.gte(30)},
        },
        25: {
            name: "35 Ecosystems",
            tooltip: "Reward: Buy Max Research Buyables",
            done() {return player.e.points.gte(35)},
        },
    },
}),
addLayer("re", { // Reclaimed ecosystems layer
    name: "reclamation", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "‚õ∫" : "Re"},
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: false,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
    }},
    tree: "tree-tab",
    color: "#FF0055",
    requires() {
        let req = new Decimal(600000)
        req = req.div(smartMilestoneEffect('m', 4))
        return req
    },
    resource: "Reclaimed Ecosystems", // Name of prestige currency
    baseResource: "trees", // Name of resource prestige is based on
    baseAmount() {return player.t.points}, // Get the current amount of baseResource
    type: "static", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1, // Prestige currency exponent
    base() {let base = new Decimal(2)
    return base},
    canBuyMax: true,
    autoPrestige() {return player.re.autoReset},
    resetsNothing() {return player.re.autoReset},
    type: "static",
    branches: ['z', 'g', 'e'],
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        mult = mult.div(smartMilestoneEffect('n', 3, {eco: 1, rec: 1}).rec)
        if(hasMilestone('n', 5)) mult = mult.div(1.5)
        mult = mult.div(smartMilestoneEffect('n', 100))
        mult = mult.div(smartUpgradeEffect('c', 41))
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    row: 2, // Row the layer is in on the tree (0 is the first row)
    doReset(resettingLayer) {
        if(layers[resettingLayer].row <= this.row) return
        let row = layers[resettingLayer].row;
        if(hasUpgrade('n', 64) && row<=3) return

        let keep = [];
        layerDataReset(this.layer, keep)
    },
    midsection: [
        ["display-text",
            "Entering a Challenge Costs 1 Ecosystem.<br>Completing a Challenge Returns Your Ecosystem."
        ],
        "blank",
    ],
    hotkeys: [
        {layer: 're', key: "r", description: "R: Reset for Reclaimed Ecosystems", onPress(){if (canReset(this.layer)) doReset(this.layer)}, unlocked() {return tmp[this.layer].layerShown}},
    ],
    layerShown(){return hasUpgrade('z', 14)||player.re.best.gte(1)},
    
    milestones: {
        0: {
            requirementDescription: "1 Reclaimed Ecosystem",
            effectDescription() {return "Unlock 1: "+tmp.re.challenges[11].name+" and Auto-buy Wildlife Upgrades"},
            done() {return player.re.points.gte(1)},
            toggles: [["w", "autoUpgrade"]],
        },
        1: {
            requirementDescription: "2 Reclaimed Ecosystems",
            effectDescription() {return "Unlock 2: "+tmp.re.challenges[12].name+" and Auto-buy Tree Upgrades"},
            done() {return player.re.points.gte(2)},
            toggles: [["t", "autoUpgrade"]],
        },
        2: {
            requirementDescription: "3 Reclaimed Ecosystems",
            effectDescription() {return "Unlock 3: "+tmp.re.challenges[21].name+" and Multiply Ecology Gain by "+format(player.re.points.add(1))},
            effect() {return player.re.points.add(1)},
            done() {return player.re.points.gte(3)},
        },
        3: {
            requirementDescription: "4 Reclaimed Ecosystems",
            effectDescription: "Unlock 2 New Ecosystem Upgrades",
            done() {return player.re.points.gte(4)},
        },
        4: {
            requirementDescription: "5 Reclaimed Ecosystems",
            effectDescription: "Divide Ecosystem Ability Cooldown by Reclaimed Ecosystems",
            effect() {return player.re.points.add(1)},
            done() {return player.re.points.gte(5)},
        },
    },
    challenges: {
        11: {
            name() {return new Decimal(challengeCompletions(this.layer, this.id)).gte(3) ? "Coral Reef" : "Polluted Reef"},
            challengeDescription() {return thisChallengeDescriptionArray(this)},
            challengeDescriptionArray: ["Wildlife Generation ^ 0.01", "Wildlife Generation ^ 0.01<br>Research Time ^ 0.01", "Wildlife Generation ^ 0.1<br>Research Time ^ 0.1<br>Point Gain ^ 0.1", "Completed"],
            unlocked() {return hasMilestone('re', 0)},
            requirementArray: [38320, 36100, 21420, 0],
            requirement() {return thisChallengeRequirement(this)},
            baseAmount() {return player.p.points},
            baseName: " Plants",
            completionLimit: 3,
            goalDescription() {return challengeGoalDescription(this.layer, this.id, thisChallengeCompletions(this))},
            canComplete() {return challengeCanComplete(this.layer, this.id)},
            rewardDescription: "Complete an Achievement",
            onEnter() {
                player.e.points = player.e.points.sub(1).max(30).min(player.e.points)
                if(player.e.points.lt(0)) player.e.points = new Decimal(0)
            },
            onComplete() {
                player.e.points = player.e.points.add(1)
            },
        },
        12: {
            name() {return new Decimal(challengeCompletions(this.layer, this.id)).gte(3) ? "Grassland" : "Toxic Wasteland"},
            challengeDescription() {return thisChallengeDescriptionArray(this)},
            challengeDescriptionArray: ["Research is Deactivated", "Gardens are Deactivated", "Plants are Deactivated (you can still gain plants)", "Completed"],
            unlocked() {return hasMilestone('re', 1)},
            requirementArray: ["1.6e6", "75e6", 12345678.9, 0],
            requirement() {return thisChallengeRequirement(this)},
            baseAmount() {return player.p.points},
            baseName: " Plants",
            completionLimit: 3,
            goalDescription() {return challengeGoalDescription(this.layer, this.id, thisChallengeCompletions(this))},
            canComplete() {return challengeCanComplete(this.layer, this.id)},
            rewardDescription: "Complete an Achievement",
            onEnter() {
                player.e.points = player.e.points.sub(1).max(30).min(player.e.points)
                if(player.e.points.lt(0)) player.e.points = new Decimal(0)
            },
            onComplete() {
                player.e.points = player.e.points.add(1)
            },
        },
        21: {
            name() {return new Decimal(challengeCompletions(this.layer, this.id)).gte(3) ? "Forest" : "Abandoned Quarry"},
            challengeDescription() {return thisChallengeDescriptionArray(this)},
            challengeDescriptionArray: ["Increase Research Exponent by 1", "Increase Garden Exponent by 1 and Reset Garden Upgrades", "Increase Plant Exponent by 1", "Completed"],
            unlocked() {return hasMilestone('re', 2)},
            requirementArray: [100000000, "3e9", 60000, 0],
            requirement() {return thisChallengeRequirement(this)},
            baseAmount() {return player.p.points},
            baseName: " Plants",
            completionLimit: 3,
            goalDescription() {return challengeGoalDescription(this.layer, this.id, thisChallengeCompletions(this))},
            canComplete() {return challengeCanComplete(this.layer, this.id)},
            rewardDescription: "Complete an Achievement",
            onEnter() {
                if(completionDecimal('re', 21).eq(1)) player.g.upgrades = [];
                player.e.points = player.e.points.sub(1).max(30).min(player.e.points)
                if(player.e.points.lt(0)) player.e.points = new Decimal(0)
            },
            onComplete() {
                player.e.points = player.e.points.add(1)
            },
        },
    },
    achievements: {
        11: {
            name: "Polluted Reef I",
            done() {return completionDecimal('re', 11).gte(1)},
            tooltip: "Raise Wildlife Gain to ^ 1.1 and Unlock a New Fish Upgrade",
        },
        12: {
            name: "Polluted Reef II",
            done() {return completionDecimal('re', 11).gte(2)},
            tooltip() {return shiftDown?("Garden Costs Divided by Reclaimed Ecosystems + 1"):("Garden Costs √∑"+format(player.re.points.add(1))+" and Unlock a New Fish Upgrade. Shift to see Details")},
        },
        13: {
            name: "Coral Reef",
            done() {return completionDecimal('re', 11).gte(3)},
            tooltip: "Base Fish Gain Increased by 100 and Unlock 2 New Fish Upgrades",
        },
        14: {
            name: "Toxic Wasteland I",
            done() {return completionDecimal('re', 12).gte(1)},
            tooltip: "Double Leaf Gain and Unlock a New Garden Upgrade",
        },
        15: {
            name: "Toxic Wasteland II",
            done() {return completionDecimal('re', 12).gte(2)},
            tooltip() {return shiftDown?"Plant Costs Divided the same as Research Requirement":"Plant costs √∑"+format(new Decimal(1).div(tmp.r.requires.div(10)))+" and Unlock a New Garden Upgrade. Shift to see Details"},
        },
        16: {
            name: "Grassland",
            done() {return completionDecimal('re', 12).gte(3)},
            tooltip: "Unlock 2 New Garden Upgrades and Raise 'Coconut Palm' Effect to the sqrt of Zones",
        },
        21: {
            name: "Abandoned Quarry I",
            done() {return completionDecimal('re', 21).gte(1)},
            tooltip: "Unlock a Research Buyable (automatically bought)",
        },
        22: {
            name: "Abandoned Quarry II",
            done() {return completionDecimal('re', 21).gte(2)},
            tooltip: "Unlock a Research Buyable (automatically bought)",
        },
        23: {
            name: "Forest",
            done() {return completionDecimal('re', 21).gte(3)},
            tooltip: "Unlock a Research Buyable (automatically bought)",
        },
        24: {
            name: "6 Reclaimed Ecosystems",
            done() {return player.re.points.gte(6)},
            tooltip: "Divide Zone Requirement by Reclaimed Ecosystems",
        },
    },
})
addLayer("n", { // Natural disasters layer
    name: "natural disasters", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol() {return options.emojiSymbols ? "üå©Ô∏è" : "N"},
    position: 3, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
		points: new Decimal(0),
        best: new Decimal(0),
        total: new Decimal(0),
        // Eruption
        ash: new Decimal(0),
        soil: new Decimal(0),
        // Earthquake
        mag: new Decimal(0),
        // Hurricane
        energy: new Decimal(0),
        // Bugs
        plantBug: false,
        wildlifeBug: false,
        researchBug: false,

        bees: new Decimal(0), // plant & wildlife bugs
        spiders: new Decimal(0), // plant & research bugs
        butterflies: new Decimal(0), // wildlife & research bugs
    }},
    tree: "tree-tab",
    color: "#555555",
    requires: new Decimal(600000),
    resource: "Disasters", // Name of prestige currency
    baseResource: "trees", // Name of resource prestige is based on
    baseAmount() {return player.t.points}, // Get the current amount of baseResource
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1, // Prestige currency exponent
    base() {let base = new Decimal(2)
    return base},
    canBuyMax: true,
    type: "static",
    prestigeNotify() {return false},
    autoUpgrade() {return player.t.autoUpgrade && hasMilestone('c', 7)},
    branches: [],
    doReset(resettingLayer) {
        if (layers[resettingLayer].row <= layers[this.layer].row) return;
        let row = layers[resettingLayer].row;
        
        let keep = [];
        layerDataReset(this.layer, keep);
    },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
               return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return new Decimal(1)
    },
    row: 3, // Row the layer is in on the tree (0 is the first row)
    displayRow: "side",
    tooltip() {return "Natural Disasters<br>Current Challenge: "+(player.n.activeChallenge ? tmp.n.challenges[player.n.activeChallenge].name : "None")},
    tabFormat: {
        Main: {
            unlocked() {return true},
            content: [
                ["display-text", function() {
                    return "Once you press this button, the leaves effect will be log10'ed and all previous progress will be reset but you will unlock the world of natural disasters.<br>Row 1 & 2 layers and research buyables will be automated<br>This is how you will be able to progress."
                }],
                "blank",
                ["clickable", [11]],
                "blank",
                ["display-text", function() {
                    return "Starting any natural disasters will also cause the above to happen.<br>It is advised to start a natural disaster immediately after pressing this button."
                }],
                "blank",
                ["upgrades", [3]],
                "blank",
                "milestones",
                "blank",
            ],
        },
        Eruption: {
            unlocked() {return getClickableState('n', 11)},
            content: [
                ["display-text", function() {
                    return `
                    Upgrades in all tabs can only be bought when currently in that tab's disaster.<br>
                    Natural disasters do not give rewards other than upgrades.<br><br>
                    In this disaster you will be hindered by:<br>
                    - Point gain is ^0.75.<br>
                    - Plant gain is √ó0.5.<br>
                    - Above 10 Plants, you lose 1 every second.<br><br>

                    You will be boosted by:<br>
                    - You gain 1 volcanic ash every second.<br><br>
                    `
                }],
                ["display-text", function() {
                    return "You have "+format(player.n.ash)+" volcanic ash<br>You have "+format(player.n.soil)+" improved soil, multiplying point gain in eruption disaster by √ó"+format(player.n.soil.add(1).root(2))
                }],
                "blank",
                ["challenge", [11]],
                "blank",
                ["upgrades", [1, 2]],
                "blank",
            ],
        },
        Earthquake: {
            unlocked() {return hasUpgrade('n', 31)},
            content: [
                ["display-text", function() {
                    return `
                    Upgrades in all tabs can only be bought when currently in that tab's disaster.<br>
                    Natural disasters do not give rewards other than upgrades.<br><br>
                    In this disaster you will be hindered by:<br>
                    - Point gain is divided by points ^0.75.<br>
                    - All static layers before ecosystems percieve their base resource's amount as if they are divided by log10 of themselves.<br><br>

                    You will be boosted by:<br>
                    - Passively generate extra point magnitude based on current point magnitude. (`+format(tmp.n.magGain)+`/sec))<br><br>
                    
                    You lose 10% of your extra point magnitude every second.<br>
                    `
                }],
                ["display-text", function() {
                    return "You have "+formatWhole(player.n.mag.floor())+" extra magnitude<br>["+format(player.n.mag)+"]"
                }],
                "blank",
                ["challenge", [12]],
                "blank",
                ["upgrades", [4, 5]],
                "blank",
            ],
        },
        Hurricane: {
            unlocked() {return hasUpgrade('n', 32)},
            content: [
                ["display-text", function() {
                    return `
                    Upgrades in all tabs can only be bought when currently in that tab's disaster.<br>
                    Natural disasters do not give rewards other than upgrades.<br><br>
                    In this disaster you will be hindered by:<br>
                    - Point gain is ^0.75.<br>
                    - Point gain is also log10ed or ^0.01, whichever one is higher.<br><br>

                    You will be boosted by:<br>
                    - your best log10 plants gotten in this challenge is turned into energy.<br><br>
                    `
                }],
                ["display-text", function() {
                    return "You have "+format(player.n.energy)+" energy<br>"
                }],
                "blank",
                ["challenge", [13]],
                "blank",
                ["upgrades", [6, 7]],
                "blank",
            ],
        },
        Bugs: {
            unlocked() {return getClickableState('n', 11) && hasMilestone('c', 3)},
            content: [
                ["display-text", function() {
                    return `
                    You will gain a different bug for each pair of bugs enabled, starting at <h2>1e13</h2> points and each bug amount is capped at 60s of production.<br>
                    Each bug nerfs you in a different way when it is enabled and you are in the challenge and point gain is log10ed.<br>
                    Your gained bugs raise wildlife gain to the log10 of the product of their amounts.
                    `
                }],
                "blank",
                ["display-text", function() {
                    return "You have "+format(player.n.bees)+" bees (pw)<br>You have "+format(player.n.spiders)+" spiders (pr)<br>You have "+format(player.n.butterflies)+" butterflies (wr)<br><br>Raising wildlife gain to ^"+format(player.n.bees.add(1).mul(player.n.spiders.add(1)).mul(player.n.butterflies.add(1)).max(1).log(10).add(1))
                }],
                function() {
                    return hasMilestone('n', 100) ?
                        [
                            "display-text", 
                            "Dividing Reclaimed Ecosystems cost by √∑"+format(milestoneEffect('n', 100)),
                        ] : undefined
                },
                function() {
                    return hasMilestone('n', 101) ?
                        [
                            "display-text", 
                            "Multiplying Conservation gain by x"+format(milestoneEffect('n', 101)),
                        ] : undefined
                },
                function() {
                    return hasMilestone('n', 102) ?
                        [
                            "display-text", 
                            "Multiplying butterfly gain by x"+format(milestoneEffect('n', 102)),
                        ] : undefined
                },
                "blank",
                ["display-text", function() {
                    return "Base gain: "+format(player.points.max(10).log(10).sub(13).max(0).add(1).log(10))+"/s<br>Base cap: "+format(player.points.max(10).log(10).sub(13).max(0).add(1).log(10).mul(60))
                }],
                ["row",[
                    function() {return inChallenge('n', 14) ? ["display-text", `[${player.n.plantBug}]`] : ["toggle", ["n", "plantBug"]]},
                    "blank",
                    ["display-text", "Toggle a bug which reduces plant and tree gain (p)"],
                ]],
                ["row",[
                    function() {return inChallenge('n', 14) ? ["display-text", `[${player.n.wildlifeBug}]`] : ["toggle", ["n", "wildlifeBug"]]},
                    "blank",
                    ["display-text", "Toggle a bug which reduces wildlife gain and caps wildlife at it's gain/sec (w)"],
                ]],
                ["row",[
                    function() {return inChallenge('n', 14) ? ["display-text", `[${player.n.researchBug}]`] : ["toggle", ["n", "researchBug"]]},
                    "blank",
                    ["display-text", "Toggle a bug which reduces research gain (r)"],
                ]],
                ["display-text", function() {
                    return "Currently: "+(player.n.plantBug?"p":"")+(player.n.wildlifeBug?"w":"")+(player.n.researchBug?"r":"")
                }],
                "blank",
                ["challenge", [14]],
                "blank",
                ["milestones", [100, 101, 102]],
                "blank",
            ],
        },
    },
    onPrestige() {
        player.n.ash = new Decimal(0)
        player.n.soil = new Decimal(0)
    },
    automate() {
        if(getClickableState('n', 11)) {
            buyMaxBuyable('p', 11)
            buyMaxBuyable('p', 12)
            buyBuyable('p', 13)

            buyMaxBuyable('g', 11)
            buyMaxBuyable('g', 12)
            buyMaxBuyable('g', 13)
            buyMaxBuyable('g', 21)

            buyBuyable('w', 11)

            buyMaxBuyable('r', 11)
            buyMaxBuyable('r', 12)
            buyMaxBuyable('r', 13)
            buyMaxBuyable('r', 21)
            buyMaxBuyable('r', 22)
            buyMaxBuyable('r', 23)
            buyMaxBuyable('r', 31)
            buyMaxBuyable('r', 32)
            buyMaxBuyable('r', 33)
        }
    },
    update(diff) {
        let gain = new Decimal(0)
        if(inChallenge('n', 11) || hasUpgrade('n', 24)) {
            gain = new Decimal(diff)
            gain = gain.mul(smartUpgradeEffect('n', 13))
            gain = gain.mul(smartUpgradeEffect('n', 23))
            player.n.ash = player.n.ash.add(gain)
            player.n.soil = player.n.soil.add(player.n.ash.root(2).div(10).mul(diff))
            if(inChallenge('n', 11)) {
                player.p.points = player.p.points.sub(diff).max(10).min(player.p.points)
            }
        }
        if(inChallenge('n', 12) || hasMilestone('n', 4)) {
            gain = tmp.n.magGain
            player.n.mag = getLogisticAmount(player.n.mag, gain, 0.1, diff).max(player.n.mag)
        }
        if(inChallenge('n', 13) || hasMilestone('n', 4)) {
            gain = player.p.points.max(1).log(10)
            gain = gain.mul(smartUpgradeEffect('n', 72))
            gain = gain.mul(smartUpgradeEffect('c', 35))
            gain = gain.mul(smartMilestoneEffect('m', 5))
            player.n.energy = player.n.energy.max(gain)
        }
        let mult = player.points.max(10).log(10).sub(13).max(0).add(1).log(10)
        if(inChallenge('n', 14) || hasUpgrade('c', 51)) {
            gain = ((player.n.plantBug && player.n.wildlifeBug) || hasUpgrade('c', 51)) ? mult : new Decimal(0)
            
            //gain = gain.mul(smartMilestoneEffect('m', 5))

            player.n.bees = player.n.bees.add(gain.mul(diff)).min(gain.mul(60)).max(player.n.bees)
        }
        if(inChallenge('n', 14) || hasUpgrade('c', 52)) {
            gain = ((player.n.plantBug && player.n.researchBug) || hasUpgrade('c', 52)) ? mult : new Decimal(0)
            player.n.spiders = player.n.spiders.add(gain.mul(diff)).min(gain.mul(60)).max(player.n.spiders)
        }
        if(inChallenge('n', 14) || hasUpgrade('c', 53)) {
            gain = ((player.n.wildlifeBug && player.n.researchBug) || hasUpgrade('c', 53)) ? mult : new Decimal(0)

            gain = gain.mul(smartMilestoneEffect('n', 102))
            gain = gain.mul(smartUpgradeEffect('c', 43))

            player.n.butterflies = player.n.butterflies.add(gain.mul(diff)).min(gain.mul(60)).max(player.n.butterflies)
        }

    },
    magGain() {
        let gain = new Decimal(0)
        let gainBase = new Decimal(10)
        gainBase = gainBase.sub(smartUpgradeEffect('n', 42, 0))
        if(inChallenge('n', 12)) gain = gain.add(pointMag().add(1).log(gainBase))
        gain = gain.add(smartUpgradeEffect('n', 43, 0))
        if(hasUpgrade('t', 101)) gain = gain.mul(2)
        return gain
    },
    layerShown(){return hasUpgrade('g', 54)||getClickableState('n', 11)},

    challenges: {
        11: {
            name: "Eruption",
            fullDisplay: " ",
            canComplete: false,
            style() {return{
                'height': '150px',
            }}
        },
        12: {
            name: "Earthquake",
            fullDisplay: " ",
            canComplete: false,
            style() {return{
                'height': '150px',
            }}
        },
        13: {
            name: "Hurricane",
            fullDisplay: " ",
            canComplete: false,
            style() {return{
                'height': '150px',
            }}
        },
        14: {
            name: "Bug Infestation",
            fullDisplay: " ",
            canComplete: false,
            style() {return{
                'height': '150px',
            }}
        },
    },
    milestones: {
        0: {
            requirementDescription: "9 Reclaimed Ecosystems",
            effectDescription: "Keep Zones Milestones on reset<br>Unlock more Tree Upgrades",
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && player.re.points.gte(9)},
        },
        1: {
            requirementDescription: "10 Reclaimed Ecosystems and 15,000 Research",
            effectDescription: "Unlock a Research Minigame",
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && msReady && player.re.points.gte(10) && player.r.points.gte(15000)},
        },
        2: {
            requirementDescription: "e1.650e9 Points",
            effectDescription: "Unlock Conservation Sites",
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && player.points.gte("e1.65e9")},
        },
        3: {
            requirementDescription: "e1.000e10 Points",
            effectDescription() {return "Reclaimed Ecosystems divide ecosystem cost and their own at a reduced rate<br>Currently: √∑"+format(this.effect.eco())+" Ecosystem cost and √∑"+format(this.effect.rec())+" Reclaimed Ecosystem cost"},
            effect: {
                eco() {return player.re.points.add(1)},
                rec() {return player.re.points.add(1).ln().add(1)},
            },
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && player.points.gte("e1e10")},
        },
        4: {
            requirementDescription: "120 Ecosystems",
            effectDescription() {return "You gain extra point magnitude and energy outside of their challenges and uncap Saguaro"},
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && player.e.points.gte(120)},
        },
        5: {
            requirementDescription: "20 Reclaimed Ecosystems",
            effectDescription() {return "Divide Reclaimed Ecosystem cost by 1.5"},
            unlocked() {return hasUpgrade('n', 74)},
            done() {return hasUpgrade('n', 74) && player.re.points.gte(20)},
        },
        6: {
            requirementDescription: "1.80e25 Trees",
            effectDescription() {return "Unlock Mountains"},
            unlocked() {return hasMilestone('c', 3)},
            done() {return player.t.points.gte("1.8e25")},
        },
        7: {
            requirementDescription: "e1.000e38 Points",
            effectDescription() {return "Unlock Navigation. This planet is complete"},
            unlocked() {return hasMilestone('n', 6)},
            done() {return player.points.gte("ee38")},
        },
        
        100: {
            requirementDescription: "1 Bee",
            effectDescription() {return "Add another bug effect which divides Reclaimed Ecosystems costs which is primarily affected by bees<br>Currently: √∑"+format(milestoneEffect(this.layer, this.id))},
            unlocked() {return hasMilestone('c', 3)},
            done() {return hasMilestone('c', 3) && player.n.bees.gte(1)},
            effect() {return player.n.bees.add(1).pow(3).mul(player.n.spiders.add(1)).mul(player.n.butterflies.add(1)).log(10).max(1)},
        },
        101: {
            requirementDescription: "1 Spider",
            effectDescription() {return "Add another bug effect which multiplies conservation gain which is primarily affected by spiders<br>Currently: x"+format(milestoneEffect(this.layer, this.id))},
            unlocked() {return hasMilestone('c', 3)},
            done() {return hasMilestone('c', 3) && player.n.spiders.gte(1)},
            effect() {return player.n.spiders.add(1).pow(3).mul(player.n.bees.add(1)).mul(player.n.butterflies.add(1)).log(10).max(1)},
        },
        102: {
            requirementDescription: "1 Butterfly",
            effectDescription() {return "Add another bug effect which multiplies butterfly gain which is primarily affected by butterflies<br>Currently: x"+format(milestoneEffect(this.layer, this.id))},
            unlocked() {return hasMilestone('c', 3)},
            done() {return hasMilestone('c', 3) && player.n.butterflies.gte(1)},
            effect() {return player.n.butterflies.add(1).pow(3).mul(player.n.bees.add(1)).mul(player.n.spiders.add(1)).log(10).max(1)},
        },
    },
    upgrades: {
        11: {
            title: "Volcanic Plants",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Divide plant costs by improved soil<br>Currently: √∑"+format(this.effect())+"<br><br>Cost: 8 Plants in Eruption"},
            canAfford() {return player.p.points.gte(8) && inChallenge('n', 11)},
            pay() {player.p.points = player.p.points.sub(8).max(0)},
            effect() {return player.n.soil.add(1)},
        },
        12: {
            title: "Volcanic Points",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Multiply point gain based on volcanic ash<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 14 Plants in Eruption"},
            canAfford() {return player.p.points.gte(14) && inChallenge('n', 11)},
            pay() {player.p.points = player.p.points.sub(14).max(0)},
            effect() {return player.n.ash.add(1).root(2)},
            tooltip: "sqrt (Volcanic Ash)",
        },
        13: {
            title: "Plant Ash",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Multiply volcanic ash gain by plants<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 17 Plants in Eruption"},
            canAfford() {return player.p.points.gte(17) && inChallenge('n', 11)},
            pay() {player.p.points = player.p.points.sub(17).max(0)},
            effect() {return player.p.points.add(1)},
        },
        14: {
            title: "Ash Clouds",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Apply improved soil effect again regardless of if you are in this challenge and plant upgrades are kept<br><br>Cost: 22 Plants in Eruption"},
            canAfford() {return player.p.points.gte(22) && inChallenge('n', 11)},
            pay() {player.p.points = player.p.points.sub(22).max(0)},
        },

        21: {
            title: "Volcanic Gardening",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Multiply point gain based on plants<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 57 Gardens in Eruption"},
            canAfford() {return player.g.points.gte(57) && inChallenge('n', 11)},
            pay() {player.g.points = player.g.points.sub(57).max(0)},
            effect() {return player.p.points.root(1.4).pow_base(1.4)},
            tooltip: "1.4 ^ 1.4rt (Plants)",
        },
        22: {
            title: "Zone Eruption",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Divide garden requirements based on volcanic ash<br>Currently: √∑"+format(this.effect())+"<br><br>Cost: 67 Gardens in Eruption"},
            canAfford() {return player.g.points.gte(67) && inChallenge('n', 11)},
            pay() {player.g.points = player.g.points.sub(67).max(0)},
            effect() {return player.n.ash.add(1).log(10).add(1)},
            tooltip: "log10 (Volcanic Ash)",
        },
        23: {
            title: "Erupting Magnitude",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Extra point magnitude multiplies volcanic ash gain<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 265 Gardens in Eruption"},
            canAfford() {return player.g.points.gte(265) && inChallenge('n', 11)},
            pay() {player.g.points = player.g.points.sub(265).max(0)},
            effect() {return player.n.mag.add(1)},
        },
        24: {
            title: "Spreading Eruption",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Most things only possible in an eruption are now possible on their own<br><br>Cost: 280 Gardens in Eruption"},
            canAfford() {return player.g.points.gte(280) && inChallenge('n', 11)},
            pay() {player.g.points = player.g.points.sub(280).max(0)},
        },

        31: {
            title: "Earthquake",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Unlock a new disaster<br><br>Cost: 35 Ecosystems"},
            canAfford() {return player.e.points.gte(35)},
            pay() {player.e.points = player.e.points.sub(35).max(0)},
            unlocked() {return getClickableState('n', 11)},
        },
        32: {
            title: "Hurricane",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Unlock a new disaster<br><br>Cost: 3 Reclaimed Ecosystems"},
            canAfford() {return player.re.points.gte(3)},
            pay() {player.re.points = player.re.points.sub(3).max(0)},
            unlocked() {return getClickableState('n', 11)},
        },

        41: {
            title: "Quaking Points",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Multiply point gain based on extra point magnitude<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 100 Plants in Earthquake"},
            canAfford() {return player.p.points.gte(100) && inChallenge('n', 12)},
            pay() {player.p.points = player.p.points.sub(100).max(0)},
            effect() {return player.n.mag.add(1).pow(5)},
            tooltip: "extra point magnitude ^ 5",
        },
        42: {
            title: "Quaking Magnitude",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Total disaster upgrades improve extra point magnitude gain formula<br>Currently: "+format(this.effect())+"<br><br>Cost: 112 Plants in Earthquake"},
            canAfford() {return player.p.points.gte(112) && inChallenge('n', 12)},
            pay() {player.p.points = player.p.points.sub(112).max(0)},
            effect() {return new Decimal(player.n.upgrades.length).div(new Decimal(player.n.upgrades.length).add(10)).mul(8)},
            tooltip: "log10(magnitude) approaching log2(magnitude)",
        },
        43: {
            title: "Building to Rubble Conversion",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Current point magnitude increase extra magnitude gain even more<br>Currently: +"+format(this.effect())+"<br><br>Cost: 130 Plants in Earthquake"},
            canAfford() {return player.p.points.gte(130) && inChallenge('n', 12)},
            pay() {player.p.points = player.p.points.sub(130).max(0)},
            effect() {return pointMag().root(2).div(10)},
            tooltip: "sqrt(magnitude) √∑ 10",
        },
        44: {
            title: "Sturdy Trees",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Keep tree milestones and upgrades<br><br>Cost: 150 Plants in Earthquake"},
            canAfford() {return player.p.points.gte(150) && inChallenge('n', 12)},
            pay() {player.p.points = player.p.points.sub(150).max(0)},
        },

        61: {
            title: "House Destruction",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Energy raises plants' perception of points<br>Currently: ^"+format(this.effect())+"<br><br>Cost: 169 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(169) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(169).max(0)},
            effect() {return player.n.energy.add(1).log(10).add(1)},
            tooltip: "log10 (Energy)",
        },
        62: {
            title: "Plant Destruction",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Double plant requirement but half garden requirement<br>Currently: √ó/√∑"+format(this.effect())+"<br><br>Cost: 177 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(177) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(177).max(0)},
            effect() {return new Decimal(2)},
        },
        63: {
            title: "Power Plant Destruction",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Energy multiplies total point gain<br>Currently: √ó"+format(this.effect())+"<br><br>Cost: 240 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(240) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(240).max(0)},
            effect() {return player.n.energy.add(1)},
        },
        64: {
            title: "Protected Ecosystems",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Keep all reclaimed ecosystems content on reset<br><br>Cost: 244 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(244) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(244).max(0)},
        },

        71: {
            title: "House DESTROYER",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Energy raises trees' perception of points and keep zone completions on reset<br>Currently: ^"+format(this.effect())+"<br><br>Cost: 369 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(369) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(369).max(0)},
            effect() {return player.n.energy.add(1).log(5).add(1)},
            tooltip: "log5 (Energy)",
        },
        72: {
            title: "Plant Seed Disperser",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Half Plant and Zone requirements and double energy gain<br>Currently: √∑/√ó"+format(this.effect())+"<br><br>Cost: 410 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(410) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(410).max(0)},
            effect() {return new Decimal(2)},
        },
        73: {
            title: "Wildlife Shelter",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Improve the Wildlife gain formula<br><br>Cost: 503 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(503) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(503).max(0)},
            tooltip: "rt - 0.1",
        },
        74: {
            title: "Hurricane Mastery",
            fullDisplay() {return "<h3>"+this.title+"</h3><br>Keep all ecosystems content on reset, raise point gain ^1.1 and unlock disaster milestones<br><br>Cost: 522 Gardens in Hurricane"},
            canAfford() {return player.g.points.gte(522) && inChallenge('n', 13)},
            pay() {player.g.points = player.g.points.sub(522).max(0)},
        },
    },
    clickables: {
        11: {
            canClick: true,
            display: "Begin Natural Disasters.",
            onClick() {
                if(!confirm("This will reset all previous progress, are you sure you want to proceed?")) return;
                doReset(this.layer, true)
                setClickableState(this.layer, this.id, true)
            },
            unlocked() {return !getClickableState(this.layer, this.id)},
        },
    },
})